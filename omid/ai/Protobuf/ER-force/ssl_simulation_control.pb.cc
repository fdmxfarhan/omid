// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_control.proto

#include "ssl_simulation_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr TeleportBall::TeleportBall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , vx_(0)
  , vy_(0)
  , vz_(0)
  , teleport_safely_(false)
  , roll_(false)
  , by_force_(false){}
struct TeleportBallDefaultTypeInternal {
  constexpr TeleportBallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TeleportBallDefaultTypeInternal() {}
  union {
    TeleportBall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TeleportBallDefaultTypeInternal _TeleportBall_default_instance_;
constexpr TeleportRobot::TeleportRobot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , x_(0)
  , y_(0)
  , orientation_(0)
  , v_x_(0)
  , v_y_(0)
  , v_angular_(0)
  , present_(false)
  , by_force_(false){}
struct TeleportRobotDefaultTypeInternal {
  constexpr TeleportRobotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TeleportRobotDefaultTypeInternal() {}
  union {
    TeleportRobot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TeleportRobotDefaultTypeInternal _TeleportRobot_default_instance_;
constexpr SimulatorControl::SimulatorControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teleport_robot_()
  , teleport_ball_(nullptr)
  , simulation_speed_(0){}
struct SimulatorControlDefaultTypeInternal {
  constexpr SimulatorControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulatorControlDefaultTypeInternal() {}
  union {
    SimulatorControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulatorControlDefaultTypeInternal _SimulatorControl_default_instance_;
constexpr SimulatorCommand::SimulatorCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_(nullptr)
  , config_(nullptr){}
struct SimulatorCommandDefaultTypeInternal {
  constexpr SimulatorCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulatorCommandDefaultTypeInternal() {}
  union {
    SimulatorCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulatorCommandDefaultTypeInternal _SimulatorCommand_default_instance_;
constexpr SimulatorResponse::SimulatorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errors_(){}
struct SimulatorResponseDefaultTypeInternal {
  constexpr SimulatorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulatorResponseDefaultTypeInternal() {}
  union {
    SimulatorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulatorResponseDefaultTypeInternal _SimulatorResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fsimulation_5fcontrol_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssl_5fsimulation_5fcontrol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fsimulation_5fcontrol_2eproto = nullptr;

const uint32_t TableStruct_ssl_5fsimulation_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TeleportBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeleportBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TeleportBall, x_),
  PROTOBUF_FIELD_OFFSET(::TeleportBall, y_),
  PROTOBUF_FIELD_OFFSET(::TeleportBall, z_),
  PROTOBUF_FIELD_OFFSET(::TeleportBall, vx_),
  PROTOBUF_FIELD_OFFSET(::TeleportBall, vy_),
  PROTOBUF_FIELD_OFFSET(::TeleportBall, vz_),
  PROTOBUF_FIELD_OFFSET(::TeleportBall, teleport_safely_),
  PROTOBUF_FIELD_OFFSET(::TeleportBall, roll_),
  PROTOBUF_FIELD_OFFSET(::TeleportBall, by_force_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, id_),
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, x_),
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, y_),
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, orientation_),
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, v_x_),
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, v_y_),
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, v_angular_),
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, present_),
  PROTOBUF_FIELD_OFFSET(::TeleportRobot, by_force_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::SimulatorControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SimulatorControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SimulatorControl, teleport_ball_),
  PROTOBUF_FIELD_OFFSET(::SimulatorControl, teleport_robot_),
  PROTOBUF_FIELD_OFFSET(::SimulatorControl, simulation_speed_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::SimulatorCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SimulatorCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SimulatorCommand, control_),
  PROTOBUF_FIELD_OFFSET(::SimulatorCommand, config_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SimulatorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SimulatorResponse, errors_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::TeleportBall)},
  { 24, 39, -1, sizeof(::TeleportRobot)},
  { 48, 57, -1, sizeof(::SimulatorControl)},
  { 60, 68, -1, sizeof(::SimulatorCommand)},
  { 70, -1, -1, sizeof(::SimulatorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TeleportBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TeleportRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SimulatorControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SimulatorCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SimulatorResponse_default_instance_),
};

const char descriptor_table_protodef_ssl_5fsimulation_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034ssl_simulation_control.proto\032,messages"
  "_robocup_ssl_detection_tracked.proto\032\033ss"
  "l_simulation_config.proto\032\032ssl_simulatio"
  "n_error.proto\"\241\001\n\014TeleportBall\022\t\n\001x\030\001 \001("
  "\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\n\n\002vx\030\004 \001(\002\022\n\n\002v"
  "y\030\005 \001(\002\022\n\n\002vz\030\006 \001(\002\022\036\n\017teleport_safely\030\007"
  " \001(\010:\005false\022\023\n\004roll\030\010 \001(\010:\005false\022\027\n\010by_f"
  "orce\030\t \001(\010:\005false\"\260\001\n\rTeleportRobot\022\024\n\002i"
  "d\030\001 \002(\0132\010.RobotId\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022"
  "\023\n\013orientation\030\004 \001(\002\022\016\n\003v_x\030\005 \001(\002:\0010\022\016\n\003"
  "v_y\030\006 \001(\002:\0010\022\024\n\tv_angular\030\007 \001(\002:\0010\022\017\n\007pr"
  "esent\030\010 \001(\010\022\027\n\010by_force\030\t \001(\010:\005false\"z\n\020"
  "SimulatorControl\022$\n\rteleport_ball\030\001 \001(\0132"
  "\r.TeleportBall\022&\n\016teleport_robot\030\002 \003(\0132\016"
  ".TeleportRobot\022\030\n\020simulation_speed\030\003 \001(\002"
  "\"X\n\020SimulatorCommand\022\"\n\007control\030\001 \001(\0132\021."
  "SimulatorControl\022 \n\006config\030\002 \001(\0132\020.Simul"
  "atorConfig\"4\n\021SimulatorResponse\022\037\n\006error"
  "s\030\001 \003(\0132\017.SimulatorErrorB8Z6github.com/R"
  "oboCup-SSL/ssl-simulation-protocol/pkg/s"
  "im"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_deps[3] = {
  &::descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto,
  &::descriptor_table_ssl_5fsimulation_5fconfig_2eproto,
  &::descriptor_table_ssl_5fsimulation_5ferror_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5fcontrol_2eproto = {
  false, false, 802, descriptor_table_protodef_ssl_5fsimulation_5fcontrol_2eproto, "ssl_simulation_control.proto", 
  &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_once, descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_ssl_5fsimulation_5fcontrol_2eproto::offsets,
  file_level_metadata_ssl_5fsimulation_5fcontrol_2eproto, file_level_enum_descriptors_ssl_5fsimulation_5fcontrol_2eproto, file_level_service_descriptors_ssl_5fsimulation_5fcontrol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_getter() {
  return &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ssl_5fsimulation_5fcontrol_2eproto(&descriptor_table_ssl_5fsimulation_5fcontrol_2eproto);

// ===================================================================

class TeleportBall::_Internal {
 public:
  using HasBits = decltype(std::declval<TeleportBall>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vz(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_teleport_safely(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_by_force(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TeleportBall::TeleportBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TeleportBall)
}
TeleportBall::TeleportBall(const TeleportBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_force_) -
    reinterpret_cast<char*>(&x_)) + sizeof(by_force_));
  // @@protoc_insertion_point(copy_constructor:TeleportBall)
}

inline void TeleportBall::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&by_force_) -
    reinterpret_cast<char*>(&x_)) + sizeof(by_force_));
}

TeleportBall::~TeleportBall() {
  // @@protoc_insertion_point(destructor:TeleportBall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TeleportBall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeleportBall::ArenaDtor(void* object) {
  TeleportBall* _this = reinterpret_cast< TeleportBall* >(object);
  (void)_this;
}
void TeleportBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeleportBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleportBall::Clear() {
// @@protoc_insertion_point(message_clear_start:TeleportBall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&x_)) + sizeof(roll_));
  }
  by_force_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleportBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float vx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_vx(&has_bits);
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float vy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_vy(&has_bits);
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float vz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_vz(&has_bits);
          vz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool teleport_safely = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_teleport_safely(&has_bits);
          teleport_safely_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool roll = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool by_force = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_by_force(&has_bits);
          by_force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeleportBall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeleportBall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float vx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_vx(), target);
  }

  // optional float vy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_vy(), target);
  }

  // optional float vz = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_vz(), target);
  }

  // optional bool teleport_safely = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_teleport_safely(), target);
  }

  // optional bool roll = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_roll(), target);
  }

  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_by_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeleportBall)
  return target;
}

size_t TeleportBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeleportBall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float vx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float vy = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float vz = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool teleport_safely = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool roll = 8 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeleportBall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeleportBall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeleportBall::GetClassData() const { return &_class_data_; }

void TeleportBall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeleportBall *>(to)->MergeFrom(
      static_cast<const TeleportBall &>(from));
}


void TeleportBall::MergeFrom(const TeleportBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeleportBall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      vx_ = from.vx_;
    }
    if (cached_has_bits & 0x00000010u) {
      vy_ = from.vy_;
    }
    if (cached_has_bits & 0x00000020u) {
      vz_ = from.vz_;
    }
    if (cached_has_bits & 0x00000040u) {
      teleport_safely_ = from.teleport_safely_;
    }
    if (cached_has_bits & 0x00000080u) {
      roll_ = from.roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_by_force(from._internal_by_force());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeleportBall::CopyFrom(const TeleportBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeleportBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleportBall::IsInitialized() const {
  return true;
}

void TeleportBall::InternalSwap(TeleportBall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleportBall, by_force_)
      + sizeof(TeleportBall::by_force_)
      - PROTOBUF_FIELD_OFFSET(TeleportBall, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleportBall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_getter, &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_once,
      file_level_metadata_ssl_5fsimulation_5fcontrol_2eproto[0]);
}

// ===================================================================

class TeleportRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<TeleportRobot>()._has_bits_);
  static const ::RobotId& id(const TeleportRobot* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_v_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_present(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_by_force(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::RobotId&
TeleportRobot::_Internal::id(const TeleportRobot* msg) {
  return *msg->id_;
}
void TeleportRobot::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TeleportRobot::TeleportRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TeleportRobot)
}
TeleportRobot::TeleportRobot(const TeleportRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::RobotId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_force_) -
    reinterpret_cast<char*>(&x_)) + sizeof(by_force_));
  // @@protoc_insertion_point(copy_constructor:TeleportRobot)
}

inline void TeleportRobot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&by_force_) -
    reinterpret_cast<char*>(&id_)) + sizeof(by_force_));
}

TeleportRobot::~TeleportRobot() {
  // @@protoc_insertion_point(destructor:TeleportRobot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TeleportRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void TeleportRobot::ArenaDtor(void* object) {
  TeleportRobot* _this = reinterpret_cast< TeleportRobot* >(object);
  (void)_this;
}
void TeleportRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeleportRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleportRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:TeleportRobot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != nullptr);
    id_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&present_) -
        reinterpret_cast<char*>(&x_)) + sizeof(present_));
  }
  by_force_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleportRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .RobotId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float v_x = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_v_x(&has_bits);
          v_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float v_y = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_v_y(&has_bits);
          v_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float v_angular = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_v_angular(&has_bits);
          v_angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool present = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_present(&has_bits);
          present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool by_force = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_by_force(&has_bits);
          by_force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeleportRobot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeleportRobot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // optional float orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_orientation(), target);
  }

  // optional float v_x = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_x(), target);
  }

  // optional float v_y = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_v_y(), target);
  }

  // optional float v_angular = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_v_angular(), target);
  }

  // optional bool present = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_present(), target);
  }

  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_by_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeleportRobot)
  return target;
}

size_t TeleportRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeleportRobot)
  size_t total_size = 0;

  // required .RobotId id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional float x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float orientation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float v_x = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float v_y = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float v_angular = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool present = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeleportRobot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeleportRobot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeleportRobot::GetClassData() const { return &_class_data_; }

void TeleportRobot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeleportRobot *>(to)->MergeFrom(
      static_cast<const TeleportRobot &>(from));
}


void TeleportRobot::MergeFrom(const TeleportRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeleportRobot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::RobotId::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      v_angular_ = from.v_angular_;
    }
    if (cached_has_bits & 0x00000080u) {
      present_ = from.present_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_by_force(from._internal_by_force());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeleportRobot::CopyFrom(const TeleportRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeleportRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleportRobot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_id()) {
    if (!id_->IsInitialized()) return false;
  }
  return true;
}

void TeleportRobot::InternalSwap(TeleportRobot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleportRobot, by_force_)
      + sizeof(TeleportRobot::by_force_)
      - PROTOBUF_FIELD_OFFSET(TeleportRobot, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleportRobot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_getter, &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_once,
      file_level_metadata_ssl_5fsimulation_5fcontrol_2eproto[1]);
}

// ===================================================================

class SimulatorControl::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulatorControl>()._has_bits_);
  static const ::TeleportBall& teleport_ball(const SimulatorControl* msg);
  static void set_has_teleport_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_simulation_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TeleportBall&
SimulatorControl::_Internal::teleport_ball(const SimulatorControl* msg) {
  return *msg->teleport_ball_;
}
SimulatorControl::SimulatorControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  teleport_robot_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SimulatorControl)
}
SimulatorControl::SimulatorControl(const SimulatorControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teleport_robot_(from.teleport_robot_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_teleport_ball()) {
    teleport_ball_ = new ::TeleportBall(*from.teleport_ball_);
  } else {
    teleport_ball_ = nullptr;
  }
  simulation_speed_ = from.simulation_speed_;
  // @@protoc_insertion_point(copy_constructor:SimulatorControl)
}

inline void SimulatorControl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&teleport_ball_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&simulation_speed_) -
    reinterpret_cast<char*>(&teleport_ball_)) + sizeof(simulation_speed_));
}

SimulatorControl::~SimulatorControl() {
  // @@protoc_insertion_point(destructor:SimulatorControl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimulatorControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete teleport_ball_;
}

void SimulatorControl::ArenaDtor(void* object) {
  SimulatorControl* _this = reinterpret_cast< SimulatorControl* >(object);
  (void)_this;
}
void SimulatorControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulatorControl::Clear() {
// @@protoc_insertion_point(message_clear_start:SimulatorControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teleport_robot_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(teleport_ball_ != nullptr);
    teleport_ball_->Clear();
  }
  simulation_speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TeleportBall teleport_ball = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teleport_ball(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TeleportRobot teleport_robot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teleport_robot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float simulation_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_simulation_speed(&has_bits);
          simulation_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulatorControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimulatorControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeleportBall teleport_ball = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::teleport_ball(this), target, stream);
  }

  // repeated .TeleportRobot teleport_robot = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teleport_robot_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_teleport_robot(i), target, stream);
  }

  // optional float simulation_speed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_simulation_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimulatorControl)
  return target;
}

size_t SimulatorControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimulatorControl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TeleportRobot teleport_robot = 2;
  total_size += 1UL * this->_internal_teleport_robot_size();
  for (const auto& msg : this->teleport_robot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TeleportBall teleport_ball = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teleport_ball_);
    }

    // optional float simulation_speed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulatorControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimulatorControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulatorControl::GetClassData() const { return &_class_data_; }

void SimulatorControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimulatorControl *>(to)->MergeFrom(
      static_cast<const SimulatorControl &>(from));
}


void SimulatorControl::MergeFrom(const SimulatorControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimulatorControl)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  teleport_robot_.MergeFrom(from.teleport_robot_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_teleport_ball()->::TeleportBall::MergeFrom(from._internal_teleport_ball());
    }
    if (cached_has_bits & 0x00000002u) {
      simulation_speed_ = from.simulation_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulatorControl::CopyFrom(const SimulatorControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimulatorControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorControl::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(teleport_robot_))
    return false;
  return true;
}

void SimulatorControl::InternalSwap(SimulatorControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teleport_robot_.InternalSwap(&other->teleport_robot_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulatorControl, simulation_speed_)
      + sizeof(SimulatorControl::simulation_speed_)
      - PROTOBUF_FIELD_OFFSET(SimulatorControl, teleport_ball_)>(
          reinterpret_cast<char*>(&teleport_ball_),
          reinterpret_cast<char*>(&other->teleport_ball_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorControl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_getter, &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_once,
      file_level_metadata_ssl_5fsimulation_5fcontrol_2eproto[2]);
}

// ===================================================================

class SimulatorCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulatorCommand>()._has_bits_);
  static const ::SimulatorControl& control(const SimulatorCommand* msg);
  static void set_has_control(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SimulatorConfig& config(const SimulatorCommand* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SimulatorControl&
SimulatorCommand::_Internal::control(const SimulatorCommand* msg) {
  return *msg->control_;
}
const ::SimulatorConfig&
SimulatorCommand::_Internal::config(const SimulatorCommand* msg) {
  return *msg->config_;
}
void SimulatorCommand::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SimulatorCommand::SimulatorCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SimulatorCommand)
}
SimulatorCommand::SimulatorCommand(const SimulatorCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control()) {
    control_ = new ::SimulatorControl(*from.control_);
  } else {
    control_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::SimulatorConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SimulatorCommand)
}

inline void SimulatorCommand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&control_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&config_) -
    reinterpret_cast<char*>(&control_)) + sizeof(config_));
}

SimulatorCommand::~SimulatorCommand() {
  // @@protoc_insertion_point(destructor:SimulatorCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimulatorCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete control_;
  if (this != internal_default_instance()) delete config_;
}

void SimulatorCommand::ArenaDtor(void* object) {
  SimulatorCommand* _this = reinterpret_cast< SimulatorCommand* >(object);
  (void)_this;
}
void SimulatorCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulatorCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SimulatorCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_ != nullptr);
      control_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SimulatorControl control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SimulatorConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulatorCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimulatorCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SimulatorControl control = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::control(this), target, stream);
  }

  // optional .SimulatorConfig config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimulatorCommand)
  return target;
}

size_t SimulatorCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimulatorCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SimulatorControl control = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_);
    }

    // optional .SimulatorConfig config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulatorCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimulatorCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulatorCommand::GetClassData() const { return &_class_data_; }

void SimulatorCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimulatorCommand *>(to)->MergeFrom(
      static_cast<const SimulatorCommand &>(from));
}


void SimulatorCommand::MergeFrom(const SimulatorCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimulatorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_control()->::SimulatorControl::MergeFrom(from._internal_control());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_config()->::SimulatorConfig::MergeFrom(from._internal_config());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulatorCommand::CopyFrom(const SimulatorCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimulatorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorCommand::IsInitialized() const {
  if (_internal_has_control()) {
    if (!control_->IsInitialized()) return false;
  }
  if (_internal_has_config()) {
    if (!config_->IsInitialized()) return false;
  }
  return true;
}

void SimulatorCommand::InternalSwap(SimulatorCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulatorCommand, config_)
      + sizeof(SimulatorCommand::config_)
      - PROTOBUF_FIELD_OFFSET(SimulatorCommand, control_)>(
          reinterpret_cast<char*>(&control_),
          reinterpret_cast<char*>(&other->control_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_getter, &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_once,
      file_level_metadata_ssl_5fsimulation_5fcontrol_2eproto[3]);
}

// ===================================================================

class SimulatorResponse::_Internal {
 public:
};

void SimulatorResponse::clear_errors() {
  errors_.Clear();
}
SimulatorResponse::SimulatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  errors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SimulatorResponse)
}
SimulatorResponse::SimulatorResponse(const SimulatorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SimulatorResponse)
}

inline void SimulatorResponse::SharedCtor() {
}

SimulatorResponse::~SimulatorResponse() {
  // @@protoc_insertion_point(destructor:SimulatorResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimulatorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimulatorResponse::ArenaDtor(void* object) {
  SimulatorResponse* _this = reinterpret_cast< SimulatorResponse* >(object);
  (void)_this;
}
void SimulatorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulatorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SimulatorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulatorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SimulatorError errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulatorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimulatorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SimulatorError errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_errors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimulatorResponse)
  return target;
}

size_t SimulatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimulatorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SimulatorError errors = 1;
  total_size += 1UL * this->_internal_errors_size();
  for (const auto& msg : this->errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulatorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimulatorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulatorResponse::GetClassData() const { return &_class_data_; }

void SimulatorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimulatorResponse *>(to)->MergeFrom(
      static_cast<const SimulatorResponse &>(from));
}


void SimulatorResponse::MergeFrom(const SimulatorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimulatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulatorResponse::CopyFrom(const SimulatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimulatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorResponse::IsInitialized() const {
  return true;
}

void SimulatorResponse::InternalSwap(SimulatorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  errors_.InternalSwap(&other->errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulatorResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_getter, &descriptor_table_ssl_5fsimulation_5fcontrol_2eproto_once,
      file_level_metadata_ssl_5fsimulation_5fcontrol_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TeleportBall* Arena::CreateMaybeMessage< ::TeleportBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeleportBall >(arena);
}
template<> PROTOBUF_NOINLINE ::TeleportRobot* Arena::CreateMaybeMessage< ::TeleportRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeleportRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::SimulatorControl* Arena::CreateMaybeMessage< ::SimulatorControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimulatorControl >(arena);
}
template<> PROTOBUF_NOINLINE ::SimulatorCommand* Arena::CreateMaybeMessage< ::SimulatorCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimulatorCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::SimulatorResponse* Arena::CreateMaybeMessage< ::SimulatorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimulatorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
