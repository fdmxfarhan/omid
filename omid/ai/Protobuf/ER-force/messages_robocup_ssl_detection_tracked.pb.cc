// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_detection_tracked.proto

#include "messages_robocup_ssl_detection_tracked.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Vector2::Vector2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vector2DefaultTypeInternal {
  constexpr Vector2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector2DefaultTypeInternal() {}
  union {
    Vector2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector2DefaultTypeInternal _Vector2_default_instance_;
constexpr Vector3::Vector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3DefaultTypeInternal {
  constexpr Vector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3DefaultTypeInternal _Vector3_default_instance_;
constexpr RobotId::RobotId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , team_color_(0)
{}
struct RobotIdDefaultTypeInternal {
  constexpr RobotIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotIdDefaultTypeInternal() {}
  union {
    RobotId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotIdDefaultTypeInternal _RobotId_default_instance_;
constexpr TrackedBall::TrackedBall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_(nullptr)
  , vel_(nullptr)
  , visibility_(0){}
struct TrackedBallDefaultTypeInternal {
  constexpr TrackedBallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackedBallDefaultTypeInternal() {}
  union {
    TrackedBall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackedBallDefaultTypeInternal _TrackedBall_default_instance_;
constexpr KickedBall::KickedBall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_(nullptr)
  , vel_(nullptr)
  , stop_pos_(nullptr)
  , robot_id_(nullptr)
  , start_timestamp_(0)
  , stop_timestamp_(0){}
struct KickedBallDefaultTypeInternal {
  constexpr KickedBallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KickedBallDefaultTypeInternal() {}
  union {
    KickedBall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KickedBallDefaultTypeInternal _KickedBall_default_instance_;
constexpr TrackedRobot::TrackedRobot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robot_id_(nullptr)
  , pos_(nullptr)
  , vel_(nullptr)
  , orientation_(0)
  , vel_angular_(0)
  , visibility_(0){}
struct TrackedRobotDefaultTypeInternal {
  constexpr TrackedRobotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackedRobotDefaultTypeInternal() {}
  union {
    TrackedRobot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackedRobotDefaultTypeInternal _TrackedRobot_default_instance_;
constexpr TrackedFrame::TrackedFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balls_()
  , robots_()
  , capabilities_()
  , kicked_ball_(nullptr)
  , timestamp_(0)
  , frame_number_(0u){}
struct TrackedFrameDefaultTypeInternal {
  constexpr TrackedFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackedFrameDefaultTypeInternal() {}
  union {
    TrackedFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackedFrameDefaultTypeInternal _TrackedFrame_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto = nullptr;

const uint32_t TableStruct_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Vector2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vector2, x_),
  PROTOBUF_FIELD_OFFSET(::Vector2, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Vector3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::Vector3, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RobotId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RobotId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RobotId, id_),
  PROTOBUF_FIELD_OFFSET(::RobotId, team_color_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TrackedBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TrackedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TrackedBall, pos_),
  PROTOBUF_FIELD_OFFSET(::TrackedBall, vel_),
  PROTOBUF_FIELD_OFFSET(::TrackedBall, visibility_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KickedBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KickedBall, pos_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, vel_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, stop_timestamp_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, stop_pos_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, robot_id_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, robot_id_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, pos_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, orientation_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, vel_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, vel_angular_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, visibility_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, frame_number_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, balls_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, robots_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, kicked_ball_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, capabilities_),
  2,
  1,
  ~0u,
  ~0u,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::Vector2)},
  { 10, 19, -1, sizeof(::Vector3)},
  { 22, 30, -1, sizeof(::RobotId)},
  { 32, 41, -1, sizeof(::TrackedBall)},
  { 44, 56, -1, sizeof(::KickedBall)},
  { 62, 74, -1, sizeof(::TrackedRobot)},
  { 80, 92, -1, sizeof(::TrackedFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrackedBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_KickedBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrackedRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrackedFrame_default_instance_),
};

const char descriptor_table_protodef_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,messages_robocup_ssl_detection_tracked"
  ".proto\"\037\n\007Vector2\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\""
  "*\n\007Vector3\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 "
  "\002(\002\"5\n\007RobotId\022\n\n\002id\030\001 \002(\r\022\036\n\nteam_color"
  "\030\002 \002(\0162\n.TeamColor\"O\n\013TrackedBall\022\025\n\003pos"
  "\030\001 \002(\0132\010.Vector3\022\025\n\003vel\030\002 \001(\0132\010.Vector3\022"
  "\022\n\nvisibility\030\003 \001(\002\"\243\001\n\nKickedBall\022\025\n\003po"
  "s\030\001 \002(\0132\010.Vector2\022\025\n\003vel\030\002 \002(\0132\010.Vector3"
  "\022\027\n\017start_timestamp\030\003 \002(\001\022\026\n\016stop_timest"
  "amp\030\004 \001(\001\022\032\n\010stop_pos\030\005 \001(\0132\010.Vector2\022\032\n"
  "\010robot_id\030\006 \001(\0132\010.RobotId\"\226\001\n\014TrackedRob"
  "ot\022\032\n\010robot_id\030\001 \002(\0132\010.RobotId\022\025\n\003pos\030\002 "
  "\002(\0132\010.Vector2\022\023\n\013orientation\030\003 \002(\002\022\025\n\003ve"
  "l\030\004 \001(\0132\010.Vector2\022\023\n\013vel_angular\030\005 \001(\002\022\022"
  "\n\nvisibility\030\006 \001(\002\"\270\001\n\014TrackedFrame\022\024\n\014f"
  "rame_number\030\001 \002(\r\022\021\n\ttimestamp\030\002 \002(\001\022\033\n\005"
  "balls\030\003 \003(\0132\014.TrackedBall\022\035\n\006robots\030\004 \003("
  "\0132\r.TrackedRobot\022 \n\013kicked_ball\030\005 \001(\0132\013."
  "KickedBall\022!\n\014capabilities\030\006 \003(\0162\013.Capab"
  "ility*O\n\tTeamColor\022\026\n\022TEAM_COLOR_UNKNOWN"
  "\020\000\022\025\n\021TEAM_COLOR_YELLOW\020\001\022\023\n\017TEAM_COLOR_"
  "BLUE\020\002*\222\001\n\nCapability\022\026\n\022CAPABILITY_UNKN"
  "OWN\020\000\022\"\n\036CAPABILITY_DETECT_FLYING_BALLS\020"
  "\001\022$\n CAPABILITY_DETECT_MULTIPLE_BALLS\020\002\022"
  "\"\n\036CAPABILITY_DETECT_KICKED_BALLS\020\003"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto = {
  false, false, 995, descriptor_table_protodef_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto, "messages_robocup_ssl_detection_tracked.proto", 
  &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto::offsets,
  file_level_metadata_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto, file_level_enum_descriptors_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto, file_level_service_descriptors_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_getter() {
  return &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto(&descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto);
  return file_level_enum_descriptors_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[0];
}
bool TeamColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Capability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto);
  return file_level_enum_descriptors_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[1];
}
bool Capability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vector2::_Internal {
 public:
  using HasBits = decltype(std::declval<Vector2>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Vector2::Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Vector2)
}
Vector2::Vector2(const Vector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vector2)
}

inline void Vector2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2::~Vector2() {
  // @@protoc_insertion_point(destructor:Vector2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2::ArenaDtor(void* object) {
  Vector2* _this = reinterpret_cast< Vector2* >(object);
  (void)_this;
}
void Vector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector2)
  return target;
}

size_t Vector2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vector2)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector2)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2::GetClassData() const { return &_class_data_; }

void Vector2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector2 *>(to)->MergeFrom(
      static_cast<const Vector2 &>(from));
}


void Vector2::MergeFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2::CopyFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Vector2::InternalSwap(Vector2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2, y_)
      + sizeof(Vector2::y_)
      - PROTOBUF_FIELD_OFFSET(Vector2, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[0]);
}

// ===================================================================

class Vector3::_Internal {
 public:
  using HasBits = decltype(std::declval<Vector3>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Vector3)
}

inline void Vector3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:Vector3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector3)
  return target;
}

size_t Vector3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vector3)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector3)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }

void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector3 *>(to)->MergeFrom(
      static_cast<const Vector3 &>(from));
}


void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[1]);
}

// ===================================================================

class RobotId::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotId>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RobotId::RobotId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RobotId)
}
RobotId::RobotId(const RobotId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_color_) -
    reinterpret_cast<char*>(&id_)) + sizeof(team_color_));
  // @@protoc_insertion_point(copy_constructor:RobotId)
}

inline void RobotId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_color_) -
    reinterpret_cast<char*>(&id_)) + sizeof(team_color_));
}

RobotId::~RobotId() {
  // @@protoc_insertion_point(destructor:RobotId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RobotId::ArenaDtor(void* object) {
  RobotId* _this = reinterpret_cast< RobotId* >(object);
  (void)_this;
}
void RobotId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotId::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_color_) -
        reinterpret_cast<char*>(&id_)) + sizeof(team_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TeamColor team_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TeamColor_IsValid(val))) {
            _internal_set_team_color(static_cast<::TeamColor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required .TeamColor team_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_team_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotId)
  return target;
}

size_t RobotId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RobotId)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required uint32 id = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  if (_internal_has_team_color()) {
    // required .TeamColor team_color = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team_color());
  }

  return total_size;
}
size_t RobotId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotId)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());

    // required .TeamColor team_color = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team_color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotId::GetClassData() const { return &_class_data_; }

void RobotId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RobotId *>(to)->MergeFrom(
      static_cast<const RobotId &>(from));
}


void RobotId::MergeFrom(const RobotId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_color_ = from.team_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotId::CopyFrom(const RobotId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotId::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RobotId::InternalSwap(RobotId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotId, team_color_)
      + sizeof(RobotId::team_color_)
      - PROTOBUF_FIELD_OFFSET(RobotId, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[2]);
}

// ===================================================================

class TrackedBall::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedBall>()._has_bits_);
  static const ::Vector3& pos(const TrackedBall* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector3& vel(const TrackedBall* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::Vector3&
TrackedBall::_Internal::pos(const TrackedBall* msg) {
  return *msg->pos_;
}
const ::Vector3&
TrackedBall::_Internal::vel(const TrackedBall* msg) {
  return *msg->vel_;
}
TrackedBall::TrackedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TrackedBall)
}
TrackedBall::TrackedBall(const TrackedBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_vel()) {
    vel_ = new ::Vector3(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  visibility_ = from.visibility_;
  // @@protoc_insertion_point(copy_constructor:TrackedBall)
}

inline void TrackedBall::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(visibility_));
}

TrackedBall::~TrackedBall() {
  // @@protoc_insertion_point(destructor:TrackedBall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackedBall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
}

void TrackedBall::ArenaDtor(void* object) {
  TrackedBall* _this = reinterpret_cast< TrackedBall* >(object);
  (void)_this;
}
void TrackedBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackedBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackedBall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vel_ != nullptr);
      vel_->Clear();
    }
  }
  visibility_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Vector3 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector3 vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedBall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrackedBall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // optional .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vel(this), target, stream);
  }

  // optional float visibility = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackedBall)
  return target;
}

size_t TrackedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackedBall)
  size_t total_size = 0;

  // required .Vector3 pos = 1;
  if (_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .Vector3 vel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vel_);
    }

    // optional float visibility = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedBall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackedBall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedBall::GetClassData() const { return &_class_data_; }

void TrackedBall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackedBall *>(to)->MergeFrom(
      static_cast<const TrackedBall &>(from));
}


void TrackedBall::MergeFrom(const TrackedBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrackedBall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::Vector3::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vel()->::Vector3::MergeFrom(from._internal_vel());
    }
    if (cached_has_bits & 0x00000004u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedBall::CopyFrom(const TrackedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!vel_->IsInitialized()) return false;
  }
  return true;
}

void TrackedBall::InternalSwap(TrackedBall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedBall, visibility_)
      + sizeof(TrackedBall::visibility_)
      - PROTOBUF_FIELD_OFFSET(TrackedBall, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedBall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[3]);
}

// ===================================================================

class KickedBall::_Internal {
 public:
  using HasBits = decltype(std::declval<KickedBall>()._has_bits_);
  static const ::Vector2& pos(const KickedBall* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector3& vel(const KickedBall* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Vector2& stop_pos(const KickedBall* msg);
  static void set_has_stop_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RobotId& robot_id(const KickedBall* msg);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::Vector2&
KickedBall::_Internal::pos(const KickedBall* msg) {
  return *msg->pos_;
}
const ::Vector3&
KickedBall::_Internal::vel(const KickedBall* msg) {
  return *msg->vel_;
}
const ::Vector2&
KickedBall::_Internal::stop_pos(const KickedBall* msg) {
  return *msg->stop_pos_;
}
const ::RobotId&
KickedBall::_Internal::robot_id(const KickedBall* msg) {
  return *msg->robot_id_;
}
KickedBall::KickedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:KickedBall)
}
KickedBall::KickedBall(const KickedBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Vector2(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_vel()) {
    vel_ = new ::Vector3(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  if (from._internal_has_stop_pos()) {
    stop_pos_ = new ::Vector2(*from.stop_pos_);
  } else {
    stop_pos_ = nullptr;
  }
  if (from._internal_has_robot_id()) {
    robot_id_ = new ::RobotId(*from.robot_id_);
  } else {
    robot_id_ = nullptr;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(stop_timestamp_));
  // @@protoc_insertion_point(copy_constructor:KickedBall)
}

inline void KickedBall::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_timestamp_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(stop_timestamp_));
}

KickedBall::~KickedBall() {
  // @@protoc_insertion_point(destructor:KickedBall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KickedBall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete stop_pos_;
  if (this != internal_default_instance()) delete robot_id_;
}

void KickedBall::ArenaDtor(void* object) {
  KickedBall* _this = reinterpret_cast< KickedBall* >(object);
  (void)_this;
}
void KickedBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickedBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KickedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:KickedBall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vel_ != nullptr);
      vel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stop_pos_ != nullptr);
      stop_pos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(robot_id_ != nullptr);
      robot_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_timestamp_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(stop_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickedBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Vector2 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Vector3 vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double start_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_stop_timestamp(&has_bits);
          stop_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 stop_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RobotId robot_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KickedBall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KickedBall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // required .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vel(this), target, stream);
  }

  // required double start_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_start_timestamp(), target);
  }

  // optional double stop_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_stop_timestamp(), target);
  }

  // optional .Vector2 stop_pos = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stop_pos(this), target, stream);
  }

  // optional .RobotId robot_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::robot_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KickedBall)
  return target;
}

size_t KickedBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KickedBall)
  size_t total_size = 0;

  if (_internal_has_pos()) {
    // required .Vector2 pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (_internal_has_vel()) {
    // required .Vector3 vel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  if (_internal_has_start_timestamp()) {
    // required double start_timestamp = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t KickedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickedBall)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .Vector2 pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required .Vector3 vel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);

    // required double start_timestamp = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .Vector2 stop_pos = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_pos_);
    }

    // optional .RobotId robot_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *robot_id_);
    }

  }
  // optional double stop_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KickedBall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KickedBall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KickedBall::GetClassData() const { return &_class_data_; }

void KickedBall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KickedBall *>(to)->MergeFrom(
      static_cast<const KickedBall &>(from));
}


void KickedBall::MergeFrom(const KickedBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickedBall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::Vector2::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vel()->::Vector3::MergeFrom(from._internal_vel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stop_pos()->::Vector2::MergeFrom(from._internal_stop_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_robot_id()->::RobotId::MergeFrom(from._internal_robot_id());
    }
    if (cached_has_bits & 0x00000010u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      stop_timestamp_ = from.stop_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KickedBall::CopyFrom(const KickedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickedBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!vel_->IsInitialized()) return false;
  }
  if (_internal_has_stop_pos()) {
    if (!stop_pos_->IsInitialized()) return false;
  }
  if (_internal_has_robot_id()) {
    if (!robot_id_->IsInitialized()) return false;
  }
  return true;
}

void KickedBall::InternalSwap(KickedBall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KickedBall, stop_timestamp_)
      + sizeof(KickedBall::stop_timestamp_)
      - PROTOBUF_FIELD_OFFSET(KickedBall, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KickedBall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[4]);
}

// ===================================================================

class TrackedRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedRobot>()._has_bits_);
  static const ::RobotId& robot_id(const TrackedRobot* msg);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& pos(const TrackedRobot* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& vel(const TrackedRobot* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vel_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::RobotId&
TrackedRobot::_Internal::robot_id(const TrackedRobot* msg) {
  return *msg->robot_id_;
}
const ::Vector2&
TrackedRobot::_Internal::pos(const TrackedRobot* msg) {
  return *msg->pos_;
}
const ::Vector2&
TrackedRobot::_Internal::vel(const TrackedRobot* msg) {
  return *msg->vel_;
}
TrackedRobot::TrackedRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TrackedRobot)
}
TrackedRobot::TrackedRobot(const TrackedRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_robot_id()) {
    robot_id_ = new ::RobotId(*from.robot_id_);
  } else {
    robot_id_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::Vector2(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_vel()) {
    vel_ = new ::Vector2(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  ::memcpy(&orientation_, &from.orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&orientation_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:TrackedRobot)
}

inline void TrackedRobot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&robot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&robot_id_)) + sizeof(visibility_));
}

TrackedRobot::~TrackedRobot() {
  // @@protoc_insertion_point(destructor:TrackedRobot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackedRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete robot_id_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
}

void TrackedRobot::ArenaDtor(void* object) {
  TrackedRobot* _this = reinterpret_cast< TrackedRobot* >(object);
  (void)_this;
}
void TrackedRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackedRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackedRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackedRobot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_id_ != nullptr);
      robot_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vel_ != nullptr);
      vel_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&orientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&orientation_)) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .RobotId robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Vector2 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 vel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float vel_angular = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_vel_angular(&has_bits);
          vel_angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedRobot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrackedRobot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RobotId robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::robot_id(this), target, stream);
  }

  // required .Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // required float orientation = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_orientation(), target);
  }

  // optional .Vector2 vel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vel(this), target, stream);
  }

  // optional float vel_angular = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_vel_angular(), target);
  }

  // optional float visibility = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackedRobot)
  return target;
}

size_t TrackedRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TrackedRobot)
  size_t total_size = 0;

  if (_internal_has_robot_id()) {
    // required .RobotId robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_id_);
  }

  if (_internal_has_pos()) {
    // required .Vector2 pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (_internal_has_orientation()) {
    // required float orientation = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TrackedRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackedRobot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .RobotId robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_id_);

    // required .Vector2 pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required float orientation = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 vel = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  if (cached_has_bits & 0x00000030u) {
    // optional float vel_angular = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float visibility = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedRobot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackedRobot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedRobot::GetClassData() const { return &_class_data_; }

void TrackedRobot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackedRobot *>(to)->MergeFrom(
      static_cast<const TrackedRobot &>(from));
}


void TrackedRobot::MergeFrom(const TrackedRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrackedRobot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_robot_id()->::RobotId::MergeFrom(from._internal_robot_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pos()->::Vector2::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vel()->::Vector2::MergeFrom(from._internal_vel());
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      vel_angular_ = from.vel_angular_;
    }
    if (cached_has_bits & 0x00000020u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedRobot::CopyFrom(const TrackedRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackedRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedRobot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_robot_id()) {
    if (!robot_id_->IsInitialized()) return false;
  }
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!vel_->IsInitialized()) return false;
  }
  return true;
}

void TrackedRobot::InternalSwap(TrackedRobot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedRobot, visibility_)
      + sizeof(TrackedRobot::visibility_)
      - PROTOBUF_FIELD_OFFSET(TrackedRobot, robot_id_)>(
          reinterpret_cast<char*>(&robot_id_),
          reinterpret_cast<char*>(&other->robot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedRobot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[5]);
}

// ===================================================================

class TrackedFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedFrame>()._has_bits_);
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KickedBall& kicked_ball(const TrackedFrame* msg);
  static void set_has_kicked_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::KickedBall&
TrackedFrame::_Internal::kicked_ball(const TrackedFrame* msg) {
  return *msg->kicked_ball_;
}
TrackedFrame::TrackedFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  balls_(arena),
  robots_(arena),
  capabilities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TrackedFrame)
}
TrackedFrame::TrackedFrame(const TrackedFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      balls_(from.balls_),
      robots_(from.robots_),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kicked_ball()) {
    kicked_ball_ = new ::KickedBall(*from.kicked_ball_);
  } else {
    kicked_ball_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_number_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_number_));
  // @@protoc_insertion_point(copy_constructor:TrackedFrame)
}

inline void TrackedFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kicked_ball_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_number_) -
    reinterpret_cast<char*>(&kicked_ball_)) + sizeof(frame_number_));
}

TrackedFrame::~TrackedFrame() {
  // @@protoc_insertion_point(destructor:TrackedFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackedFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete kicked_ball_;
}

void TrackedFrame::ArenaDtor(void* object) {
  TrackedFrame* _this = reinterpret_cast< TrackedFrame* >(object);
  (void)_this;
}
void TrackedFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackedFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackedFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackedFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balls_.Clear();
  robots_.Clear();
  capabilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(kicked_ball_ != nullptr);
    kicked_ball_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_number_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 frame_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_frame_number(&has_bits);
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .TrackedBall balls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TrackedRobot robots = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .KickedBall kicked_ball = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_kicked_ball(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Capability capabilities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::Capability_IsValid(val))) {
              _internal_add_capabilities(static_cast<::Capability>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_capabilities(), ptr, ctx, ::Capability_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrackedFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame_number(), target);
  }

  // required double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .TrackedBall balls = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_balls(i), target, stream);
  }

  // repeated .TrackedRobot robots = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_robots(i), target, stream);
  }

  // optional .KickedBall kicked_ball = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::kicked_ball(this), target, stream);
  }

  // repeated .Capability capabilities = 6;
  for (int i = 0, n = this->_internal_capabilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        6, this->_internal_capabilities(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackedFrame)
  return target;
}

size_t TrackedFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TrackedFrame)
  size_t total_size = 0;

  if (_internal_has_timestamp()) {
    // required double timestamp = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_frame_number()) {
    // required uint32 frame_number = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_number());
  }

  return total_size;
}
size_t TrackedFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackedFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required double timestamp = 2;
    total_size += 1 + 8;

    // required uint32 frame_number = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TrackedBall balls = 3;
  total_size += 1UL * this->_internal_balls_size();
  for (const auto& msg : this->balls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TrackedRobot robots = 4;
  total_size += 1UL * this->_internal_robots_size();
  for (const auto& msg : this->robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Capability capabilities = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_capabilities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_capabilities(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .KickedBall kicked_ball = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kicked_ball_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackedFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedFrame::GetClassData() const { return &_class_data_; }

void TrackedFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackedFrame *>(to)->MergeFrom(
      static_cast<const TrackedFrame &>(from));
}


void TrackedFrame::MergeFrom(const TrackedFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrackedFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  balls_.MergeFrom(from.balls_);
  robots_.MergeFrom(from.robots_);
  capabilities_.MergeFrom(from.capabilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_kicked_ball()->::KickedBall::MergeFrom(from._internal_kicked_ball());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_number_ = from.frame_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedFrame::CopyFrom(const TrackedFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackedFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(balls_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robots_))
    return false;
  if (_internal_has_kicked_ball()) {
    if (!kicked_ball_->IsInitialized()) return false;
  }
  return true;
}

void TrackedFrame::InternalSwap(TrackedFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  balls_.InternalSwap(&other->balls_);
  robots_.InternalSwap(&other->robots_);
  capabilities_.InternalSwap(&other->capabilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedFrame, frame_number_)
      + sizeof(TrackedFrame::frame_number_)
      - PROTOBUF_FIELD_OFFSET(TrackedFrame, kicked_ball_)>(
          reinterpret_cast<char*>(&kicked_ball_),
          reinterpret_cast<char*>(&other->kicked_ball_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vector2* Arena::CreateMaybeMessage< ::Vector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Vector3* Arena::CreateMaybeMessage< ::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotId* Arena::CreateMaybeMessage< ::RobotId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotId >(arena);
}
template<> PROTOBUF_NOINLINE ::TrackedBall* Arena::CreateMaybeMessage< ::TrackedBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrackedBall >(arena);
}
template<> PROTOBUF_NOINLINE ::KickedBall* Arena::CreateMaybeMessage< ::KickedBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KickedBall >(arena);
}
template<> PROTOBUF_NOINLINE ::TrackedRobot* Arena::CreateMaybeMessage< ::TrackedRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrackedRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::TrackedFrame* Arena::CreateMaybeMessage< ::TrackedFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrackedFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
