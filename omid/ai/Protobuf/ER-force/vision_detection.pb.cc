// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_detection.proto

#include "vision_detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Vision_DetectionBall::Vision_DetectionBall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vel_x_(0)
  , vel_y_(0)
  , area_(0u)
  , x_(0)
  , y_(0)
  , height_(0)
  , ball_state_(0u)
  , last_touch_(0u)
  , valid_(false)
  , raw_x_(0)
  , raw_y_(0)
  , chip_predict_x_(0)
  , chip_predict_y_(0){}
struct Vision_DetectionBallDefaultTypeInternal {
  constexpr Vision_DetectionBallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vision_DetectionBallDefaultTypeInternal() {}
  union {
    Vision_DetectionBall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vision_DetectionBallDefaultTypeInternal _Vision_DetectionBall_default_instance_;
constexpr Vision_DetectionRobot::Vision_DetectionRobot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valid_(false)
  , robot_id_(0u)
  , x_(0)
  , y_(0)
  , orientation_(0)
  , vel_x_(0)
  , vel_y_(0)
  , rotate_vel_(0)
  , accelerate_x_(0)
  , accelerate_y_(0)
  , raw_x_(0)
  , raw_y_(0)
  , raw_orientation_(0){}
struct Vision_DetectionRobotDefaultTypeInternal {
  constexpr Vision_DetectionRobotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vision_DetectionRobotDefaultTypeInternal() {}
  union {
    Vision_DetectionRobot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vision_DetectionRobotDefaultTypeInternal _Vision_DetectionRobot_default_instance_;
constexpr Vision_DetectionFrame::Vision_DetectionFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robots_yellow_()
  , robots_blue_()
  , balls_(nullptr){}
struct Vision_DetectionFrameDefaultTypeInternal {
  constexpr Vision_DetectionFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vision_DetectionFrameDefaultTypeInternal() {}
  union {
    Vision_DetectionFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vision_DetectionFrameDefaultTypeInternal _Vision_DetectionFrame_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vision_5fdetection_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vision_5fdetection_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vision_5fdetection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vision_5fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, vel_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, vel_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, area_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, height_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, ball_state_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, last_touch_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, valid_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, raw_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, raw_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_predict_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_predict_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, valid_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, robot_id_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, orientation_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, vel_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, vel_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, rotate_vel_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, accelerate_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, accelerate_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, raw_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, raw_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, raw_orientation_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, balls_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, robots_yellow_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, robots_blue_),
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::Vision_DetectionBall)},
  { 31, 49, sizeof(::Vision_DetectionRobot)},
  { 62, 70, sizeof(::Vision_DetectionFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vision_DetectionBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vision_DetectionRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vision_DetectionFrame_default_instance_),
};

const char descriptor_table_protodef_vision_5fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026vision_detection.proto\"\355\001\n\024Vision_Dete"
  "ctionBall\022\r\n\005vel_x\030\001 \001(\002\022\r\n\005vel_y\030\002 \001(\002\022"
  "\014\n\004area\030\003 \001(\r\022\t\n\001x\030\004 \002(\002\022\t\n\001y\030\005 \002(\002\022\016\n\006h"
  "eight\030\006 \001(\002\022\022\n\nball_state\030\007 \001(\r\022\022\n\nlast_"
  "touch\030\010 \001(\r\022\r\n\005valid\030\t \002(\010\022\r\n\005raw_x\030\n \002("
  "\002\022\r\n\005raw_y\030\013 \002(\002\022\026\n\016chip_predict_x\030\014 \001(\002"
  "\022\026\n\016chip_predict_y\030\r \001(\002\"\370\001\n\025Vision_Dete"
  "ctionRobot\022\r\n\005valid\030\001 \002(\010\022\020\n\010robot_id\030\002 "
  "\001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\023\n\013orientation"
  "\030\005 \001(\002\022\r\n\005vel_x\030\006 \001(\002\022\r\n\005vel_y\030\007 \001(\002\022\022\n\n"
  "rotate_vel\030\010 \001(\002\022\024\n\014accelerate_x\030\t \001(\002\022\024"
  "\n\014accelerate_y\030\n \001(\002\022\r\n\005raw_x\030\013 \002(\002\022\r\n\005r"
  "aw_y\030\014 \002(\002\022\027\n\017raw_orientation\030\r \001(\002\"\231\001\n\025"
  "Vision_DetectionFrame\022$\n\005balls\030\001 \002(\0132\025.V"
  "ision_DetectionBall\022-\n\rrobots_yellow\030\002 \003"
  "(\0132\026.Vision_DetectionRobot\022+\n\013robots_blu"
  "e\030\003 \003(\0132\026.Vision_DetectionRobot"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vision_5fdetection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vision_5fdetection_2eproto = {
  false, false, 671, descriptor_table_protodef_vision_5fdetection_2eproto, "vision_detection.proto", 
  &descriptor_table_vision_5fdetection_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_vision_5fdetection_2eproto::offsets,
  file_level_metadata_vision_5fdetection_2eproto, file_level_enum_descriptors_vision_5fdetection_2eproto, file_level_service_descriptors_vision_5fdetection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_vision_5fdetection_2eproto_getter() {
  return &descriptor_table_vision_5fdetection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vision_5fdetection_2eproto(&descriptor_table_vision_5fdetection_2eproto);

// ===================================================================

class Vision_DetectionBall::_Internal {
 public:
  using HasBits = decltype(std::declval<Vision_DetectionBall>()._has_bits_);
  static void set_has_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ball_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_touch(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_raw_x(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_raw_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_chip_predict_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_chip_predict_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000718) ^ 0x00000718) != 0;
  }
};

Vision_DetectionBall::Vision_DetectionBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Vision_DetectionBall)
}
Vision_DetectionBall::Vision_DetectionBall(const Vision_DetectionBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vel_x_, &from.vel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&chip_predict_y_) -
    reinterpret_cast<char*>(&vel_x_)) + sizeof(chip_predict_y_));
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionBall)
}

inline void Vision_DetectionBall::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vel_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chip_predict_y_) -
    reinterpret_cast<char*>(&vel_x_)) + sizeof(chip_predict_y_));
}

Vision_DetectionBall::~Vision_DetectionBall() {
  // @@protoc_insertion_point(destructor:Vision_DetectionBall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vision_DetectionBall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vision_DetectionBall::ArenaDtor(void* object) {
  Vision_DetectionBall* _this = reinterpret_cast< Vision_DetectionBall* >(object);
  (void)_this;
}
void Vision_DetectionBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vision_DetectionBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vision_DetectionBall::Clear() {
// @@protoc_insertion_point(message_clear_start:Vision_DetectionBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_touch_) -
        reinterpret_cast<char*>(&vel_x_)) + sizeof(last_touch_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chip_predict_y_) -
        reinterpret_cast<char*>(&valid_)) + sizeof(chip_predict_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vision_DetectionBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float vel_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_vel_x(&has_bits);
          vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vel_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_vel_y(&has_bits);
          vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_area(&has_bits);
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 ball_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ball_state(&has_bits);
          ball_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_touch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_last_touch(&has_bits);
          last_touch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool valid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float raw_x = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_raw_x(&has_bits);
          raw_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float raw_y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_raw_y(&has_bits);
          raw_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_predict_x = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_chip_predict_x(&has_bits);
          chip_predict_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_predict_y = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_chip_predict_y(&has_bits);
          chip_predict_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vision_DetectionBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vel_x(), target);
  }

  // optional float vel_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_vel_y(), target);
  }

  // optional uint32 area = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_area(), target);
  }

  // required float x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // required float y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_height(), target);
  }

  // optional uint32 ball_state = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ball_state(), target);
  }

  // optional uint32 last_touch = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_last_touch(), target);
  }

  // required bool valid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_valid(), target);
  }

  // required float raw_x = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_raw_x(), target);
  }

  // required float raw_y = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_raw_y(), target);
  }

  // optional float chip_predict_x = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_chip_predict_x(), target);
  }

  // optional float chip_predict_y = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_chip_predict_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionBall)
  return target;
}

size_t Vision_DetectionBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vision_DetectionBall)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_valid()) {
    // required bool valid = 9;
    total_size += 1 + 1;
  }

  if (_internal_has_raw_x()) {
    // required float raw_x = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_raw_y()) {
    // required float raw_y = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vision_DetectionBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vision_DetectionBall)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000718) ^ 0x00000718) == 0) {  // All required fields are present.
    // required float x = 4;
    total_size += 1 + 4;

    // required float y = 5;
    total_size += 1 + 4;

    // required bool valid = 9;
    total_size += 1 + 1;

    // required float raw_x = 10;
    total_size += 1 + 4;

    // required float raw_y = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float vel_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float vel_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 area = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_area());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional float height = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 ball_state = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ball_state());
    }

    // optional uint32 last_touch = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_touch());
    }

  }
  if (cached_has_bits & 0x00001800u) {
    // optional float chip_predict_x = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float chip_predict_y = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vision_DetectionBall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vision_DetectionBall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vision_DetectionBall::GetClassData() const { return &_class_data_; }

void Vision_DetectionBall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vision_DetectionBall *>(to)->MergeFrom(
      static_cast<const Vision_DetectionBall &>(from));
}


void Vision_DetectionBall::MergeFrom(const Vision_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vision_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vel_x_ = from.vel_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      vel_y_ = from.vel_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      ball_state_ = from.ball_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_touch_ = from.last_touch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000200u) {
      raw_x_ = from.raw_x_;
    }
    if (cached_has_bits & 0x00000400u) {
      raw_y_ = from.raw_y_;
    }
    if (cached_has_bits & 0x00000800u) {
      chip_predict_x_ = from.chip_predict_x_;
    }
    if (cached_has_bits & 0x00001000u) {
      chip_predict_y_ = from.chip_predict_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vision_DetectionBall::CopyFrom(const Vision_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vision_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Vision_DetectionBall::InternalSwap(Vision_DetectionBall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vision_DetectionBall, chip_predict_y_)
      + sizeof(Vision_DetectionBall::chip_predict_y_)
      - PROTOBUF_FIELD_OFFSET(Vision_DetectionBall, vel_x_)>(
          reinterpret_cast<char*>(&vel_x_),
          reinterpret_cast<char*>(&other->vel_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vision_DetectionBall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vision_5fdetection_2eproto_getter, &descriptor_table_vision_5fdetection_2eproto_once,
      file_level_metadata_vision_5fdetection_2eproto[0]);
}

// ===================================================================

class Vision_DetectionRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<Vision_DetectionRobot>()._has_bits_);
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rotate_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_accelerate_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_accelerate_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_raw_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_raw_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_raw_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000c0d) ^ 0x00000c0d) != 0;
  }
};

Vision_DetectionRobot::Vision_DetectionRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Vision_DetectionRobot)
}
Vision_DetectionRobot::Vision_DetectionRobot(const Vision_DetectionRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_orientation_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(raw_orientation_));
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionRobot)
}

inline void Vision_DetectionRobot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&valid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raw_orientation_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(raw_orientation_));
}

Vision_DetectionRobot::~Vision_DetectionRobot() {
  // @@protoc_insertion_point(destructor:Vision_DetectionRobot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vision_DetectionRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vision_DetectionRobot::ArenaDtor(void* object) {
  Vision_DetectionRobot* _this = reinterpret_cast< Vision_DetectionRobot* >(object);
  (void)_this;
}
void Vision_DetectionRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vision_DetectionRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vision_DetectionRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:Vision_DetectionRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotate_vel_) -
        reinterpret_cast<char*>(&valid_)) + sizeof(rotate_vel_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&accelerate_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_orientation_) -
        reinterpret_cast<char*>(&accelerate_x_)) + sizeof(raw_orientation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vision_DetectionRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 robot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_robot_id(&has_bits);
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vel_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_vel_x(&has_bits);
          vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vel_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_vel_y(&has_bits);
          vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rotate_vel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_rotate_vel(&has_bits);
          rotate_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accelerate_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_accelerate_x(&has_bits);
          accelerate_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accelerate_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_accelerate_y(&has_bits);
          accelerate_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float raw_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_raw_x(&has_bits);
          raw_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float raw_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_raw_y(&has_bits);
          raw_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float raw_orientation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_raw_orientation(&has_bits);
          raw_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vision_DetectionRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_robot_id(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_orientation(), target);
  }

  // optional float vel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_vel_x(), target);
  }

  // optional float vel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_vel_y(), target);
  }

  // optional float rotate_vel = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rotate_vel(), target);
  }

  // optional float accelerate_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_accelerate_x(), target);
  }

  // optional float accelerate_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_accelerate_y(), target);
  }

  // required float raw_x = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_raw_x(), target);
  }

  // required float raw_y = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_raw_y(), target);
  }

  // optional float raw_orientation = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_raw_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionRobot)
  return target;
}

size_t Vision_DetectionRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vision_DetectionRobot)
  size_t total_size = 0;

  if (_internal_has_valid()) {
    // required bool valid = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_raw_x()) {
    // required float raw_x = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_raw_y()) {
    // required float raw_y = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vision_DetectionRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vision_DetectionRobot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000c0d) ^ 0x00000c0d) == 0) {  // All required fields are present.
    // required bool valid = 1;
    total_size += 1 + 1;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float raw_x = 11;
    total_size += 1 + 4;

    // required float raw_y = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 robot_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_robot_id());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional float orientation = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float vel_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float vel_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float rotate_vel = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float accelerate_x = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float accelerate_y = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  // optional float raw_orientation = 13;
  if (cached_has_bits & 0x00001000u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vision_DetectionRobot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vision_DetectionRobot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vision_DetectionRobot::GetClassData() const { return &_class_data_; }

void Vision_DetectionRobot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vision_DetectionRobot *>(to)->MergeFrom(
      static_cast<const Vision_DetectionRobot &>(from));
}


void Vision_DetectionRobot::MergeFrom(const Vision_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vision_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      robot_id_ = from.robot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000020u) {
      vel_x_ = from.vel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      vel_y_ = from.vel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      rotate_vel_ = from.rotate_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      accelerate_x_ = from.accelerate_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      accelerate_y_ = from.accelerate_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      raw_x_ = from.raw_x_;
    }
    if (cached_has_bits & 0x00000800u) {
      raw_y_ = from.raw_y_;
    }
    if (cached_has_bits & 0x00001000u) {
      raw_orientation_ = from.raw_orientation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vision_DetectionRobot::CopyFrom(const Vision_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vision_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionRobot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Vision_DetectionRobot::InternalSwap(Vision_DetectionRobot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vision_DetectionRobot, raw_orientation_)
      + sizeof(Vision_DetectionRobot::raw_orientation_)
      - PROTOBUF_FIELD_OFFSET(Vision_DetectionRobot, valid_)>(
          reinterpret_cast<char*>(&valid_),
          reinterpret_cast<char*>(&other->valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vision_DetectionRobot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vision_5fdetection_2eproto_getter, &descriptor_table_vision_5fdetection_2eproto_once,
      file_level_metadata_vision_5fdetection_2eproto[1]);
}

// ===================================================================

class Vision_DetectionFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<Vision_DetectionFrame>()._has_bits_);
  static const ::Vision_DetectionBall& balls(const Vision_DetectionFrame* msg);
  static void set_has_balls(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::Vision_DetectionBall&
Vision_DetectionFrame::_Internal::balls(const Vision_DetectionFrame* msg) {
  return *msg->balls_;
}
Vision_DetectionFrame::Vision_DetectionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  robots_yellow_(arena),
  robots_blue_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Vision_DetectionFrame)
}
Vision_DetectionFrame::Vision_DetectionFrame(const Vision_DetectionFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      robots_yellow_(from.robots_yellow_),
      robots_blue_(from.robots_blue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_balls()) {
    balls_ = new ::Vision_DetectionBall(*from.balls_);
  } else {
    balls_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionFrame)
}

inline void Vision_DetectionFrame::SharedCtor() {
balls_ = nullptr;
}

Vision_DetectionFrame::~Vision_DetectionFrame() {
  // @@protoc_insertion_point(destructor:Vision_DetectionFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vision_DetectionFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete balls_;
}

void Vision_DetectionFrame::ArenaDtor(void* object) {
  Vision_DetectionFrame* _this = reinterpret_cast< Vision_DetectionFrame* >(object);
  (void)_this;
}
void Vision_DetectionFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vision_DetectionFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vision_DetectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:Vision_DetectionFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robots_yellow_.Clear();
  robots_blue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(balls_ != nullptr);
    balls_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vision_DetectionFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Vision_DetectionBall balls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_balls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Vision_DetectionRobot robots_yellow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_yellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Vision_DetectionRobot robots_blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_blue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vision_DetectionFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vision_DetectionBall balls = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::balls(this), target, stream);
  }

  // repeated .Vision_DetectionRobot robots_yellow = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_yellow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_robots_yellow(i), target, stream);
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_blue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_robots_blue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionFrame)
  return target;
}

size_t Vision_DetectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vision_DetectionFrame)
  size_t total_size = 0;

  // required .Vision_DetectionBall balls = 1;
  if (_internal_has_balls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balls_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Vision_DetectionRobot robots_yellow = 2;
  total_size += 1UL * this->_internal_robots_yellow_size();
  for (const auto& msg : this->robots_yellow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  total_size += 1UL * this->_internal_robots_blue_size();
  for (const auto& msg : this->robots_blue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vision_DetectionFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vision_DetectionFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vision_DetectionFrame::GetClassData() const { return &_class_data_; }

void Vision_DetectionFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vision_DetectionFrame *>(to)->MergeFrom(
      static_cast<const Vision_DetectionFrame &>(from));
}


void Vision_DetectionFrame::MergeFrom(const Vision_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vision_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  if (from._internal_has_balls()) {
    _internal_mutable_balls()->::Vision_DetectionBall::MergeFrom(from._internal_balls());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vision_DetectionFrame::CopyFrom(const Vision_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vision_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robots_yellow_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robots_blue_)) return false;
  if (_internal_has_balls()) {
    if (!balls_->IsInitialized()) return false;
  }
  return true;
}

void Vision_DetectionFrame::InternalSwap(Vision_DetectionFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robots_yellow_.InternalSwap(&other->robots_yellow_);
  robots_blue_.InternalSwap(&other->robots_blue_);
  swap(balls_, other->balls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vision_DetectionFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vision_5fdetection_2eproto_getter, &descriptor_table_vision_5fdetection_2eproto_once,
      file_level_metadata_vision_5fdetection_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vision_DetectionBall* Arena::CreateMaybeMessage< ::Vision_DetectionBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vision_DetectionBall >(arena);
}
template<> PROTOBUF_NOINLINE ::Vision_DetectionRobot* Arena::CreateMaybeMessage< ::Vision_DetectionRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vision_DetectionRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::Vision_DetectionFrame* Arena::CreateMaybeMessage< ::Vision_DetectionFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vision_DetectionFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
