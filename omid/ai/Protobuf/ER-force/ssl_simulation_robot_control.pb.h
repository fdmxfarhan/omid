// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_robot_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5frobot_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5frobot_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5frobot_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fsimulation_5frobot_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
class MoveGlobalVelocity;
struct MoveGlobalVelocityDefaultTypeInternal;
extern MoveGlobalVelocityDefaultTypeInternal _MoveGlobalVelocity_default_instance_;
class MoveLocalVelocity;
struct MoveLocalVelocityDefaultTypeInternal;
extern MoveLocalVelocityDefaultTypeInternal _MoveLocalVelocity_default_instance_;
class MoveWheelVelocity;
struct MoveWheelVelocityDefaultTypeInternal;
extern MoveWheelVelocityDefaultTypeInternal _MoveWheelVelocity_default_instance_;
class RobotCommand;
struct RobotCommandDefaultTypeInternal;
extern RobotCommandDefaultTypeInternal _RobotCommand_default_instance_;
class RobotControl;
struct RobotControlDefaultTypeInternal;
extern RobotControlDefaultTypeInternal _RobotControl_default_instance_;
class RobotMoveCommand;
struct RobotMoveCommandDefaultTypeInternal;
extern RobotMoveCommandDefaultTypeInternal _RobotMoveCommand_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MoveGlobalVelocity* Arena::CreateMaybeMessage<::MoveGlobalVelocity>(Arena*);
template<> ::MoveLocalVelocity* Arena::CreateMaybeMessage<::MoveLocalVelocity>(Arena*);
template<> ::MoveWheelVelocity* Arena::CreateMaybeMessage<::MoveWheelVelocity>(Arena*);
template<> ::RobotCommand* Arena::CreateMaybeMessage<::RobotCommand>(Arena*);
template<> ::RobotControl* Arena::CreateMaybeMessage<::RobotControl>(Arena*);
template<> ::RobotMoveCommand* Arena::CreateMaybeMessage<::RobotMoveCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RobotCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RobotCommand) */ {
 public:
  inline RobotCommand() : RobotCommand(nullptr) {}
  ~RobotCommand() override;
  explicit constexpr RobotCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotCommand(const RobotCommand& from);
  RobotCommand(RobotCommand&& from) noexcept
    : RobotCommand() {
    *this = ::std::move(from);
  }

  inline RobotCommand& operator=(const RobotCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotCommand& operator=(RobotCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotCommand* internal_default_instance() {
    return reinterpret_cast<const RobotCommand*>(
               &_RobotCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RobotCommand& a, RobotCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RobotCommand";
  }
  protected:
  explicit RobotCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveCommandFieldNumber = 2,
    kIdFieldNumber = 1,
    kKickSpeedFieldNumber = 3,
    kKickAngleFieldNumber = 4,
    kDribblerSpeedFieldNumber = 5,
  };
  // optional .RobotMoveCommand move_command = 2;
  bool has_move_command() const;
  private:
  bool _internal_has_move_command() const;
  public:
  void clear_move_command();
  const ::RobotMoveCommand& move_command() const;
  PROTOBUF_NODISCARD ::RobotMoveCommand* release_move_command();
  ::RobotMoveCommand* mutable_move_command();
  void set_allocated_move_command(::RobotMoveCommand* move_command);
  private:
  const ::RobotMoveCommand& _internal_move_command() const;
  ::RobotMoveCommand* _internal_mutable_move_command();
  public:
  void unsafe_arena_set_allocated_move_command(
      ::RobotMoveCommand* move_command);
  ::RobotMoveCommand* unsafe_arena_release_move_command();

  // required uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional float kick_speed = 3;
  bool has_kick_speed() const;
  private:
  bool _internal_has_kick_speed() const;
  public:
  void clear_kick_speed();
  float kick_speed() const;
  void set_kick_speed(float value);
  private:
  float _internal_kick_speed() const;
  void _internal_set_kick_speed(float value);
  public:

  // optional float kick_angle = 4 [default = 0];
  bool has_kick_angle() const;
  private:
  bool _internal_has_kick_angle() const;
  public:
  void clear_kick_angle();
  float kick_angle() const;
  void set_kick_angle(float value);
  private:
  float _internal_kick_angle() const;
  void _internal_set_kick_angle(float value);
  public:

  // optional float dribbler_speed = 5;
  bool has_dribbler_speed() const;
  private:
  bool _internal_has_dribbler_speed() const;
  public:
  void clear_dribbler_speed();
  float dribbler_speed() const;
  void set_dribbler_speed(float value);
  private:
  float _internal_dribbler_speed() const;
  void _internal_set_dribbler_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:RobotCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RobotMoveCommand* move_command_;
  uint32_t id_;
  float kick_speed_;
  float kick_angle_;
  float dribbler_speed_;
  friend struct ::TableStruct_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class RobotMoveCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RobotMoveCommand) */ {
 public:
  inline RobotMoveCommand() : RobotMoveCommand(nullptr) {}
  ~RobotMoveCommand() override;
  explicit constexpr RobotMoveCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotMoveCommand(const RobotMoveCommand& from);
  RobotMoveCommand(RobotMoveCommand&& from) noexcept
    : RobotMoveCommand() {
    *this = ::std::move(from);
  }

  inline RobotMoveCommand& operator=(const RobotMoveCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotMoveCommand& operator=(RobotMoveCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotMoveCommand& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kWheelVelocity = 1,
    kLocalVelocity = 2,
    kGlobalVelocity = 3,
    COMMAND_NOT_SET = 0,
  };

  static inline const RobotMoveCommand* internal_default_instance() {
    return reinterpret_cast<const RobotMoveCommand*>(
               &_RobotMoveCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotMoveCommand& a, RobotMoveCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotMoveCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotMoveCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotMoveCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotMoveCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotMoveCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotMoveCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotMoveCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RobotMoveCommand";
  }
  protected:
  explicit RobotMoveCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWheelVelocityFieldNumber = 1,
    kLocalVelocityFieldNumber = 2,
    kGlobalVelocityFieldNumber = 3,
  };
  // .MoveWheelVelocity wheel_velocity = 1;
  bool has_wheel_velocity() const;
  private:
  bool _internal_has_wheel_velocity() const;
  public:
  void clear_wheel_velocity();
  const ::MoveWheelVelocity& wheel_velocity() const;
  PROTOBUF_NODISCARD ::MoveWheelVelocity* release_wheel_velocity();
  ::MoveWheelVelocity* mutable_wheel_velocity();
  void set_allocated_wheel_velocity(::MoveWheelVelocity* wheel_velocity);
  private:
  const ::MoveWheelVelocity& _internal_wheel_velocity() const;
  ::MoveWheelVelocity* _internal_mutable_wheel_velocity();
  public:
  void unsafe_arena_set_allocated_wheel_velocity(
      ::MoveWheelVelocity* wheel_velocity);
  ::MoveWheelVelocity* unsafe_arena_release_wheel_velocity();

  // .MoveLocalVelocity local_velocity = 2;
  bool has_local_velocity() const;
  private:
  bool _internal_has_local_velocity() const;
  public:
  void clear_local_velocity();
  const ::MoveLocalVelocity& local_velocity() const;
  PROTOBUF_NODISCARD ::MoveLocalVelocity* release_local_velocity();
  ::MoveLocalVelocity* mutable_local_velocity();
  void set_allocated_local_velocity(::MoveLocalVelocity* local_velocity);
  private:
  const ::MoveLocalVelocity& _internal_local_velocity() const;
  ::MoveLocalVelocity* _internal_mutable_local_velocity();
  public:
  void unsafe_arena_set_allocated_local_velocity(
      ::MoveLocalVelocity* local_velocity);
  ::MoveLocalVelocity* unsafe_arena_release_local_velocity();

  // .MoveGlobalVelocity global_velocity = 3;
  bool has_global_velocity() const;
  private:
  bool _internal_has_global_velocity() const;
  public:
  void clear_global_velocity();
  const ::MoveGlobalVelocity& global_velocity() const;
  PROTOBUF_NODISCARD ::MoveGlobalVelocity* release_global_velocity();
  ::MoveGlobalVelocity* mutable_global_velocity();
  void set_allocated_global_velocity(::MoveGlobalVelocity* global_velocity);
  private:
  const ::MoveGlobalVelocity& _internal_global_velocity() const;
  ::MoveGlobalVelocity* _internal_mutable_global_velocity();
  public:
  void unsafe_arena_set_allocated_global_velocity(
      ::MoveGlobalVelocity* global_velocity);
  ::MoveGlobalVelocity* unsafe_arena_release_global_velocity();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:RobotMoveCommand)
 private:
  class _Internal;
  void set_has_wheel_velocity();
  void set_has_local_velocity();
  void set_has_global_velocity();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CommandUnion {
    constexpr CommandUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::MoveWheelVelocity* wheel_velocity_;
    ::MoveLocalVelocity* local_velocity_;
    ::MoveGlobalVelocity* global_velocity_;
  } command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class MoveWheelVelocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MoveWheelVelocity) */ {
 public:
  inline MoveWheelVelocity() : MoveWheelVelocity(nullptr) {}
  ~MoveWheelVelocity() override;
  explicit constexpr MoveWheelVelocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveWheelVelocity(const MoveWheelVelocity& from);
  MoveWheelVelocity(MoveWheelVelocity&& from) noexcept
    : MoveWheelVelocity() {
    *this = ::std::move(from);
  }

  inline MoveWheelVelocity& operator=(const MoveWheelVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveWheelVelocity& operator=(MoveWheelVelocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveWheelVelocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveWheelVelocity* internal_default_instance() {
    return reinterpret_cast<const MoveWheelVelocity*>(
               &_MoveWheelVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MoveWheelVelocity& a, MoveWheelVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveWheelVelocity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveWheelVelocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveWheelVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveWheelVelocity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveWheelVelocity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveWheelVelocity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveWheelVelocity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MoveWheelVelocity";
  }
  protected:
  explicit MoveWheelVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontRightFieldNumber = 1,
    kBackRightFieldNumber = 2,
    kBackLeftFieldNumber = 3,
    kFrontLeftFieldNumber = 4,
  };
  // required float front_right = 1;
  bool has_front_right() const;
  private:
  bool _internal_has_front_right() const;
  public:
  void clear_front_right();
  float front_right() const;
  void set_front_right(float value);
  private:
  float _internal_front_right() const;
  void _internal_set_front_right(float value);
  public:

  // required float back_right = 2;
  bool has_back_right() const;
  private:
  bool _internal_has_back_right() const;
  public:
  void clear_back_right();
  float back_right() const;
  void set_back_right(float value);
  private:
  float _internal_back_right() const;
  void _internal_set_back_right(float value);
  public:

  // required float back_left = 3;
  bool has_back_left() const;
  private:
  bool _internal_has_back_left() const;
  public:
  void clear_back_left();
  float back_left() const;
  void set_back_left(float value);
  private:
  float _internal_back_left() const;
  void _internal_set_back_left(float value);
  public:

  // required float front_left = 4;
  bool has_front_left() const;
  private:
  bool _internal_has_front_left() const;
  public:
  void clear_front_left();
  float front_left() const;
  void set_front_left(float value);
  private:
  float _internal_front_left() const;
  void _internal_set_front_left(float value);
  public:

  // @@protoc_insertion_point(class_scope:MoveWheelVelocity)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float front_right_;
  float back_right_;
  float back_left_;
  float front_left_;
  friend struct ::TableStruct_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class MoveLocalVelocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MoveLocalVelocity) */ {
 public:
  inline MoveLocalVelocity() : MoveLocalVelocity(nullptr) {}
  ~MoveLocalVelocity() override;
  explicit constexpr MoveLocalVelocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveLocalVelocity(const MoveLocalVelocity& from);
  MoveLocalVelocity(MoveLocalVelocity&& from) noexcept
    : MoveLocalVelocity() {
    *this = ::std::move(from);
  }

  inline MoveLocalVelocity& operator=(const MoveLocalVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLocalVelocity& operator=(MoveLocalVelocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveLocalVelocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveLocalVelocity* internal_default_instance() {
    return reinterpret_cast<const MoveLocalVelocity*>(
               &_MoveLocalVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MoveLocalVelocity& a, MoveLocalVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveLocalVelocity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveLocalVelocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveLocalVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveLocalVelocity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveLocalVelocity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveLocalVelocity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLocalVelocity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MoveLocalVelocity";
  }
  protected:
  explicit MoveLocalVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardFieldNumber = 1,
    kLeftFieldNumber = 2,
    kAngularFieldNumber = 3,
  };
  // required float forward = 1;
  bool has_forward() const;
  private:
  bool _internal_has_forward() const;
  public:
  void clear_forward();
  float forward() const;
  void set_forward(float value);
  private:
  float _internal_forward() const;
  void _internal_set_forward(float value);
  public:

  // required float left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // required float angular = 3;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  float angular() const;
  void set_angular(float value);
  private:
  float _internal_angular() const;
  void _internal_set_angular(float value);
  public:

  // @@protoc_insertion_point(class_scope:MoveLocalVelocity)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float forward_;
  float left_;
  float angular_;
  friend struct ::TableStruct_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class MoveGlobalVelocity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MoveGlobalVelocity) */ {
 public:
  inline MoveGlobalVelocity() : MoveGlobalVelocity(nullptr) {}
  ~MoveGlobalVelocity() override;
  explicit constexpr MoveGlobalVelocity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveGlobalVelocity(const MoveGlobalVelocity& from);
  MoveGlobalVelocity(MoveGlobalVelocity&& from) noexcept
    : MoveGlobalVelocity() {
    *this = ::std::move(from);
  }

  inline MoveGlobalVelocity& operator=(const MoveGlobalVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveGlobalVelocity& operator=(MoveGlobalVelocity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveGlobalVelocity& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveGlobalVelocity* internal_default_instance() {
    return reinterpret_cast<const MoveGlobalVelocity*>(
               &_MoveGlobalVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MoveGlobalVelocity& a, MoveGlobalVelocity& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveGlobalVelocity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveGlobalVelocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveGlobalVelocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveGlobalVelocity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveGlobalVelocity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveGlobalVelocity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveGlobalVelocity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MoveGlobalVelocity";
  }
  protected:
  explicit MoveGlobalVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kAngularFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float angular = 3;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  float angular() const;
  void set_angular(float value);
  private:
  float _internal_angular() const;
  void _internal_set_angular(float value);
  public:

  // @@protoc_insertion_point(class_scope:MoveGlobalVelocity)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float angular_;
  friend struct ::TableStruct_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class RobotControl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RobotControl) */ {
 public:
  inline RobotControl() : RobotControl(nullptr) {}
  ~RobotControl() override;
  explicit constexpr RobotControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotControl(const RobotControl& from);
  RobotControl(RobotControl&& from) noexcept
    : RobotControl() {
    *this = ::std::move(from);
  }

  inline RobotControl& operator=(const RobotControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotControl& operator=(RobotControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotControl* internal_default_instance() {
    return reinterpret_cast<const RobotControl*>(
               &_RobotControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RobotControl& a, RobotControl& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotControl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotControl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotControl& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RobotControl";
  }
  protected:
  explicit RobotControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotCommandsFieldNumber = 1,
  };
  // repeated .RobotCommand robot_commands = 1;
  int robot_commands_size() const;
  private:
  int _internal_robot_commands_size() const;
  public:
  void clear_robot_commands();
  ::RobotCommand* mutable_robot_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotCommand >*
      mutable_robot_commands();
  private:
  const ::RobotCommand& _internal_robot_commands(int index) const;
  ::RobotCommand* _internal_add_robot_commands();
  public:
  const ::RobotCommand& robot_commands(int index) const;
  ::RobotCommand* add_robot_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotCommand >&
      robot_commands() const;

  // @@protoc_insertion_point(class_scope:RobotControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotCommand > robot_commands_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssl_5fsimulation_5frobot_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotCommand

// required uint32 id = 1;
inline bool RobotCommand::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RobotCommand::has_id() const {
  return _internal_has_id();
}
inline void RobotCommand::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RobotCommand::_internal_id() const {
  return id_;
}
inline uint32_t RobotCommand::id() const {
  // @@protoc_insertion_point(field_get:RobotCommand.id)
  return _internal_id();
}
inline void RobotCommand::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void RobotCommand::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RobotCommand.id)
}

// optional .RobotMoveCommand move_command = 2;
inline bool RobotCommand::_internal_has_move_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || move_command_ != nullptr);
  return value;
}
inline bool RobotCommand::has_move_command() const {
  return _internal_has_move_command();
}
inline void RobotCommand::clear_move_command() {
  if (move_command_ != nullptr) move_command_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RobotMoveCommand& RobotCommand::_internal_move_command() const {
  const ::RobotMoveCommand* p = move_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::RobotMoveCommand&>(
      ::_RobotMoveCommand_default_instance_);
}
inline const ::RobotMoveCommand& RobotCommand::move_command() const {
  // @@protoc_insertion_point(field_get:RobotCommand.move_command)
  return _internal_move_command();
}
inline void RobotCommand::unsafe_arena_set_allocated_move_command(
    ::RobotMoveCommand* move_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_command_);
  }
  move_command_ = move_command;
  if (move_command) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RobotCommand.move_command)
}
inline ::RobotMoveCommand* RobotCommand::release_move_command() {
  _has_bits_[0] &= ~0x00000001u;
  ::RobotMoveCommand* temp = move_command_;
  move_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RobotMoveCommand* RobotCommand::unsafe_arena_release_move_command() {
  // @@protoc_insertion_point(field_release:RobotCommand.move_command)
  _has_bits_[0] &= ~0x00000001u;
  ::RobotMoveCommand* temp = move_command_;
  move_command_ = nullptr;
  return temp;
}
inline ::RobotMoveCommand* RobotCommand::_internal_mutable_move_command() {
  _has_bits_[0] |= 0x00000001u;
  if (move_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::RobotMoveCommand>(GetArenaForAllocation());
    move_command_ = p;
  }
  return move_command_;
}
inline ::RobotMoveCommand* RobotCommand::mutable_move_command() {
  ::RobotMoveCommand* _msg = _internal_mutable_move_command();
  // @@protoc_insertion_point(field_mutable:RobotCommand.move_command)
  return _msg;
}
inline void RobotCommand::set_allocated_move_command(::RobotMoveCommand* move_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete move_command_;
  }
  if (move_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::RobotMoveCommand>::GetOwningArena(move_command);
    if (message_arena != submessage_arena) {
      move_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  move_command_ = move_command;
  // @@protoc_insertion_point(field_set_allocated:RobotCommand.move_command)
}

// optional float kick_speed = 3;
inline bool RobotCommand::_internal_has_kick_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RobotCommand::has_kick_speed() const {
  return _internal_has_kick_speed();
}
inline void RobotCommand::clear_kick_speed() {
  kick_speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RobotCommand::_internal_kick_speed() const {
  return kick_speed_;
}
inline float RobotCommand::kick_speed() const {
  // @@protoc_insertion_point(field_get:RobotCommand.kick_speed)
  return _internal_kick_speed();
}
inline void RobotCommand::_internal_set_kick_speed(float value) {
  _has_bits_[0] |= 0x00000004u;
  kick_speed_ = value;
}
inline void RobotCommand::set_kick_speed(float value) {
  _internal_set_kick_speed(value);
  // @@protoc_insertion_point(field_set:RobotCommand.kick_speed)
}

// optional float kick_angle = 4 [default = 0];
inline bool RobotCommand::_internal_has_kick_angle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RobotCommand::has_kick_angle() const {
  return _internal_has_kick_angle();
}
inline void RobotCommand::clear_kick_angle() {
  kick_angle_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RobotCommand::_internal_kick_angle() const {
  return kick_angle_;
}
inline float RobotCommand::kick_angle() const {
  // @@protoc_insertion_point(field_get:RobotCommand.kick_angle)
  return _internal_kick_angle();
}
inline void RobotCommand::_internal_set_kick_angle(float value) {
  _has_bits_[0] |= 0x00000008u;
  kick_angle_ = value;
}
inline void RobotCommand::set_kick_angle(float value) {
  _internal_set_kick_angle(value);
  // @@protoc_insertion_point(field_set:RobotCommand.kick_angle)
}

// optional float dribbler_speed = 5;
inline bool RobotCommand::_internal_has_dribbler_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RobotCommand::has_dribbler_speed() const {
  return _internal_has_dribbler_speed();
}
inline void RobotCommand::clear_dribbler_speed() {
  dribbler_speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RobotCommand::_internal_dribbler_speed() const {
  return dribbler_speed_;
}
inline float RobotCommand::dribbler_speed() const {
  // @@protoc_insertion_point(field_get:RobotCommand.dribbler_speed)
  return _internal_dribbler_speed();
}
inline void RobotCommand::_internal_set_dribbler_speed(float value) {
  _has_bits_[0] |= 0x00000010u;
  dribbler_speed_ = value;
}
inline void RobotCommand::set_dribbler_speed(float value) {
  _internal_set_dribbler_speed(value);
  // @@protoc_insertion_point(field_set:RobotCommand.dribbler_speed)
}

// -------------------------------------------------------------------

// RobotMoveCommand

// .MoveWheelVelocity wheel_velocity = 1;
inline bool RobotMoveCommand::_internal_has_wheel_velocity() const {
  return command_case() == kWheelVelocity;
}
inline bool RobotMoveCommand::has_wheel_velocity() const {
  return _internal_has_wheel_velocity();
}
inline void RobotMoveCommand::set_has_wheel_velocity() {
  _oneof_case_[0] = kWheelVelocity;
}
inline void RobotMoveCommand::clear_wheel_velocity() {
  if (_internal_has_wheel_velocity()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.wheel_velocity_;
    }
    clear_has_command();
  }
}
inline ::MoveWheelVelocity* RobotMoveCommand::release_wheel_velocity() {
  // @@protoc_insertion_point(field_release:RobotMoveCommand.wheel_velocity)
  if (_internal_has_wheel_velocity()) {
    clear_has_command();
      ::MoveWheelVelocity* temp = command_.wheel_velocity_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.wheel_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MoveWheelVelocity& RobotMoveCommand::_internal_wheel_velocity() const {
  return _internal_has_wheel_velocity()
      ? *command_.wheel_velocity_
      : reinterpret_cast< ::MoveWheelVelocity&>(::_MoveWheelVelocity_default_instance_);
}
inline const ::MoveWheelVelocity& RobotMoveCommand::wheel_velocity() const {
  // @@protoc_insertion_point(field_get:RobotMoveCommand.wheel_velocity)
  return _internal_wheel_velocity();
}
inline ::MoveWheelVelocity* RobotMoveCommand::unsafe_arena_release_wheel_velocity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RobotMoveCommand.wheel_velocity)
  if (_internal_has_wheel_velocity()) {
    clear_has_command();
    ::MoveWheelVelocity* temp = command_.wheel_velocity_;
    command_.wheel_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RobotMoveCommand::unsafe_arena_set_allocated_wheel_velocity(::MoveWheelVelocity* wheel_velocity) {
  clear_command();
  if (wheel_velocity) {
    set_has_wheel_velocity();
    command_.wheel_velocity_ = wheel_velocity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RobotMoveCommand.wheel_velocity)
}
inline ::MoveWheelVelocity* RobotMoveCommand::_internal_mutable_wheel_velocity() {
  if (!_internal_has_wheel_velocity()) {
    clear_command();
    set_has_wheel_velocity();
    command_.wheel_velocity_ = CreateMaybeMessage< ::MoveWheelVelocity >(GetArenaForAllocation());
  }
  return command_.wheel_velocity_;
}
inline ::MoveWheelVelocity* RobotMoveCommand::mutable_wheel_velocity() {
  ::MoveWheelVelocity* _msg = _internal_mutable_wheel_velocity();
  // @@protoc_insertion_point(field_mutable:RobotMoveCommand.wheel_velocity)
  return _msg;
}

// .MoveLocalVelocity local_velocity = 2;
inline bool RobotMoveCommand::_internal_has_local_velocity() const {
  return command_case() == kLocalVelocity;
}
inline bool RobotMoveCommand::has_local_velocity() const {
  return _internal_has_local_velocity();
}
inline void RobotMoveCommand::set_has_local_velocity() {
  _oneof_case_[0] = kLocalVelocity;
}
inline void RobotMoveCommand::clear_local_velocity() {
  if (_internal_has_local_velocity()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.local_velocity_;
    }
    clear_has_command();
  }
}
inline ::MoveLocalVelocity* RobotMoveCommand::release_local_velocity() {
  // @@protoc_insertion_point(field_release:RobotMoveCommand.local_velocity)
  if (_internal_has_local_velocity()) {
    clear_has_command();
      ::MoveLocalVelocity* temp = command_.local_velocity_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.local_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MoveLocalVelocity& RobotMoveCommand::_internal_local_velocity() const {
  return _internal_has_local_velocity()
      ? *command_.local_velocity_
      : reinterpret_cast< ::MoveLocalVelocity&>(::_MoveLocalVelocity_default_instance_);
}
inline const ::MoveLocalVelocity& RobotMoveCommand::local_velocity() const {
  // @@protoc_insertion_point(field_get:RobotMoveCommand.local_velocity)
  return _internal_local_velocity();
}
inline ::MoveLocalVelocity* RobotMoveCommand::unsafe_arena_release_local_velocity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RobotMoveCommand.local_velocity)
  if (_internal_has_local_velocity()) {
    clear_has_command();
    ::MoveLocalVelocity* temp = command_.local_velocity_;
    command_.local_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RobotMoveCommand::unsafe_arena_set_allocated_local_velocity(::MoveLocalVelocity* local_velocity) {
  clear_command();
  if (local_velocity) {
    set_has_local_velocity();
    command_.local_velocity_ = local_velocity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RobotMoveCommand.local_velocity)
}
inline ::MoveLocalVelocity* RobotMoveCommand::_internal_mutable_local_velocity() {
  if (!_internal_has_local_velocity()) {
    clear_command();
    set_has_local_velocity();
    command_.local_velocity_ = CreateMaybeMessage< ::MoveLocalVelocity >(GetArenaForAllocation());
  }
  return command_.local_velocity_;
}
inline ::MoveLocalVelocity* RobotMoveCommand::mutable_local_velocity() {
  ::MoveLocalVelocity* _msg = _internal_mutable_local_velocity();
  // @@protoc_insertion_point(field_mutable:RobotMoveCommand.local_velocity)
  return _msg;
}

// .MoveGlobalVelocity global_velocity = 3;
inline bool RobotMoveCommand::_internal_has_global_velocity() const {
  return command_case() == kGlobalVelocity;
}
inline bool RobotMoveCommand::has_global_velocity() const {
  return _internal_has_global_velocity();
}
inline void RobotMoveCommand::set_has_global_velocity() {
  _oneof_case_[0] = kGlobalVelocity;
}
inline void RobotMoveCommand::clear_global_velocity() {
  if (_internal_has_global_velocity()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.global_velocity_;
    }
    clear_has_command();
  }
}
inline ::MoveGlobalVelocity* RobotMoveCommand::release_global_velocity() {
  // @@protoc_insertion_point(field_release:RobotMoveCommand.global_velocity)
  if (_internal_has_global_velocity()) {
    clear_has_command();
      ::MoveGlobalVelocity* temp = command_.global_velocity_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.global_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MoveGlobalVelocity& RobotMoveCommand::_internal_global_velocity() const {
  return _internal_has_global_velocity()
      ? *command_.global_velocity_
      : reinterpret_cast< ::MoveGlobalVelocity&>(::_MoveGlobalVelocity_default_instance_);
}
inline const ::MoveGlobalVelocity& RobotMoveCommand::global_velocity() const {
  // @@protoc_insertion_point(field_get:RobotMoveCommand.global_velocity)
  return _internal_global_velocity();
}
inline ::MoveGlobalVelocity* RobotMoveCommand::unsafe_arena_release_global_velocity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RobotMoveCommand.global_velocity)
  if (_internal_has_global_velocity()) {
    clear_has_command();
    ::MoveGlobalVelocity* temp = command_.global_velocity_;
    command_.global_velocity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RobotMoveCommand::unsafe_arena_set_allocated_global_velocity(::MoveGlobalVelocity* global_velocity) {
  clear_command();
  if (global_velocity) {
    set_has_global_velocity();
    command_.global_velocity_ = global_velocity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RobotMoveCommand.global_velocity)
}
inline ::MoveGlobalVelocity* RobotMoveCommand::_internal_mutable_global_velocity() {
  if (!_internal_has_global_velocity()) {
    clear_command();
    set_has_global_velocity();
    command_.global_velocity_ = CreateMaybeMessage< ::MoveGlobalVelocity >(GetArenaForAllocation());
  }
  return command_.global_velocity_;
}
inline ::MoveGlobalVelocity* RobotMoveCommand::mutable_global_velocity() {
  ::MoveGlobalVelocity* _msg = _internal_mutable_global_velocity();
  // @@protoc_insertion_point(field_mutable:RobotMoveCommand.global_velocity)
  return _msg;
}

inline bool RobotMoveCommand::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void RobotMoveCommand::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline RobotMoveCommand::CommandCase RobotMoveCommand::command_case() const {
  return RobotMoveCommand::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MoveWheelVelocity

// required float front_right = 1;
inline bool MoveWheelVelocity::_internal_has_front_right() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MoveWheelVelocity::has_front_right() const {
  return _internal_has_front_right();
}
inline void MoveWheelVelocity::clear_front_right() {
  front_right_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MoveWheelVelocity::_internal_front_right() const {
  return front_right_;
}
inline float MoveWheelVelocity::front_right() const {
  // @@protoc_insertion_point(field_get:MoveWheelVelocity.front_right)
  return _internal_front_right();
}
inline void MoveWheelVelocity::_internal_set_front_right(float value) {
  _has_bits_[0] |= 0x00000001u;
  front_right_ = value;
}
inline void MoveWheelVelocity::set_front_right(float value) {
  _internal_set_front_right(value);
  // @@protoc_insertion_point(field_set:MoveWheelVelocity.front_right)
}

// required float back_right = 2;
inline bool MoveWheelVelocity::_internal_has_back_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MoveWheelVelocity::has_back_right() const {
  return _internal_has_back_right();
}
inline void MoveWheelVelocity::clear_back_right() {
  back_right_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MoveWheelVelocity::_internal_back_right() const {
  return back_right_;
}
inline float MoveWheelVelocity::back_right() const {
  // @@protoc_insertion_point(field_get:MoveWheelVelocity.back_right)
  return _internal_back_right();
}
inline void MoveWheelVelocity::_internal_set_back_right(float value) {
  _has_bits_[0] |= 0x00000002u;
  back_right_ = value;
}
inline void MoveWheelVelocity::set_back_right(float value) {
  _internal_set_back_right(value);
  // @@protoc_insertion_point(field_set:MoveWheelVelocity.back_right)
}

// required float back_left = 3;
inline bool MoveWheelVelocity::_internal_has_back_left() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MoveWheelVelocity::has_back_left() const {
  return _internal_has_back_left();
}
inline void MoveWheelVelocity::clear_back_left() {
  back_left_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MoveWheelVelocity::_internal_back_left() const {
  return back_left_;
}
inline float MoveWheelVelocity::back_left() const {
  // @@protoc_insertion_point(field_get:MoveWheelVelocity.back_left)
  return _internal_back_left();
}
inline void MoveWheelVelocity::_internal_set_back_left(float value) {
  _has_bits_[0] |= 0x00000004u;
  back_left_ = value;
}
inline void MoveWheelVelocity::set_back_left(float value) {
  _internal_set_back_left(value);
  // @@protoc_insertion_point(field_set:MoveWheelVelocity.back_left)
}

// required float front_left = 4;
inline bool MoveWheelVelocity::_internal_has_front_left() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MoveWheelVelocity::has_front_left() const {
  return _internal_has_front_left();
}
inline void MoveWheelVelocity::clear_front_left() {
  front_left_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MoveWheelVelocity::_internal_front_left() const {
  return front_left_;
}
inline float MoveWheelVelocity::front_left() const {
  // @@protoc_insertion_point(field_get:MoveWheelVelocity.front_left)
  return _internal_front_left();
}
inline void MoveWheelVelocity::_internal_set_front_left(float value) {
  _has_bits_[0] |= 0x00000008u;
  front_left_ = value;
}
inline void MoveWheelVelocity::set_front_left(float value) {
  _internal_set_front_left(value);
  // @@protoc_insertion_point(field_set:MoveWheelVelocity.front_left)
}

// -------------------------------------------------------------------

// MoveLocalVelocity

// required float forward = 1;
inline bool MoveLocalVelocity::_internal_has_forward() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MoveLocalVelocity::has_forward() const {
  return _internal_has_forward();
}
inline void MoveLocalVelocity::clear_forward() {
  forward_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MoveLocalVelocity::_internal_forward() const {
  return forward_;
}
inline float MoveLocalVelocity::forward() const {
  // @@protoc_insertion_point(field_get:MoveLocalVelocity.forward)
  return _internal_forward();
}
inline void MoveLocalVelocity::_internal_set_forward(float value) {
  _has_bits_[0] |= 0x00000001u;
  forward_ = value;
}
inline void MoveLocalVelocity::set_forward(float value) {
  _internal_set_forward(value);
  // @@protoc_insertion_point(field_set:MoveLocalVelocity.forward)
}

// required float left = 2;
inline bool MoveLocalVelocity::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MoveLocalVelocity::has_left() const {
  return _internal_has_left();
}
inline void MoveLocalVelocity::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MoveLocalVelocity::_internal_left() const {
  return left_;
}
inline float MoveLocalVelocity::left() const {
  // @@protoc_insertion_point(field_get:MoveLocalVelocity.left)
  return _internal_left();
}
inline void MoveLocalVelocity::_internal_set_left(float value) {
  _has_bits_[0] |= 0x00000002u;
  left_ = value;
}
inline void MoveLocalVelocity::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:MoveLocalVelocity.left)
}

// required float angular = 3;
inline bool MoveLocalVelocity::_internal_has_angular() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MoveLocalVelocity::has_angular() const {
  return _internal_has_angular();
}
inline void MoveLocalVelocity::clear_angular() {
  angular_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MoveLocalVelocity::_internal_angular() const {
  return angular_;
}
inline float MoveLocalVelocity::angular() const {
  // @@protoc_insertion_point(field_get:MoveLocalVelocity.angular)
  return _internal_angular();
}
inline void MoveLocalVelocity::_internal_set_angular(float value) {
  _has_bits_[0] |= 0x00000004u;
  angular_ = value;
}
inline void MoveLocalVelocity::set_angular(float value) {
  _internal_set_angular(value);
  // @@protoc_insertion_point(field_set:MoveLocalVelocity.angular)
}

// -------------------------------------------------------------------

// MoveGlobalVelocity

// required float x = 1;
inline bool MoveGlobalVelocity::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MoveGlobalVelocity::has_x() const {
  return _internal_has_x();
}
inline void MoveGlobalVelocity::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MoveGlobalVelocity::_internal_x() const {
  return x_;
}
inline float MoveGlobalVelocity::x() const {
  // @@protoc_insertion_point(field_get:MoveGlobalVelocity.x)
  return _internal_x();
}
inline void MoveGlobalVelocity::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void MoveGlobalVelocity::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:MoveGlobalVelocity.x)
}

// required float y = 2;
inline bool MoveGlobalVelocity::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MoveGlobalVelocity::has_y() const {
  return _internal_has_y();
}
inline void MoveGlobalVelocity::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MoveGlobalVelocity::_internal_y() const {
  return y_;
}
inline float MoveGlobalVelocity::y() const {
  // @@protoc_insertion_point(field_get:MoveGlobalVelocity.y)
  return _internal_y();
}
inline void MoveGlobalVelocity::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void MoveGlobalVelocity::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:MoveGlobalVelocity.y)
}

// required float angular = 3;
inline bool MoveGlobalVelocity::_internal_has_angular() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MoveGlobalVelocity::has_angular() const {
  return _internal_has_angular();
}
inline void MoveGlobalVelocity::clear_angular() {
  angular_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MoveGlobalVelocity::_internal_angular() const {
  return angular_;
}
inline float MoveGlobalVelocity::angular() const {
  // @@protoc_insertion_point(field_get:MoveGlobalVelocity.angular)
  return _internal_angular();
}
inline void MoveGlobalVelocity::_internal_set_angular(float value) {
  _has_bits_[0] |= 0x00000004u;
  angular_ = value;
}
inline void MoveGlobalVelocity::set_angular(float value) {
  _internal_set_angular(value);
  // @@protoc_insertion_point(field_set:MoveGlobalVelocity.angular)
}

// -------------------------------------------------------------------

// RobotControl

// repeated .RobotCommand robot_commands = 1;
inline int RobotControl::_internal_robot_commands_size() const {
  return robot_commands_.size();
}
inline int RobotControl::robot_commands_size() const {
  return _internal_robot_commands_size();
}
inline void RobotControl::clear_robot_commands() {
  robot_commands_.Clear();
}
inline ::RobotCommand* RobotControl::mutable_robot_commands(int index) {
  // @@protoc_insertion_point(field_mutable:RobotControl.robot_commands)
  return robot_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotCommand >*
RobotControl::mutable_robot_commands() {
  // @@protoc_insertion_point(field_mutable_list:RobotControl.robot_commands)
  return &robot_commands_;
}
inline const ::RobotCommand& RobotControl::_internal_robot_commands(int index) const {
  return robot_commands_.Get(index);
}
inline const ::RobotCommand& RobotControl::robot_commands(int index) const {
  // @@protoc_insertion_point(field_get:RobotControl.robot_commands)
  return _internal_robot_commands(index);
}
inline ::RobotCommand* RobotControl::_internal_add_robot_commands() {
  return robot_commands_.Add();
}
inline ::RobotCommand* RobotControl::add_robot_commands() {
  ::RobotCommand* _add = _internal_add_robot_commands();
  // @@protoc_insertion_point(field_add:RobotControl.robot_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotCommand >&
RobotControl::robot_commands() const {
  // @@protoc_insertion_point(field_list:RobotControl.robot_commands)
  return robot_commands_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5frobot_5fcontrol_2eproto
