// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_robot_feedback.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5frobot_5ffeedback_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5frobot_5ffeedback_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ssl_simulation_error.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5frobot_5ffeedback_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fsimulation_5frobot_5ffeedback_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5frobot_5ffeedback_2eproto;
class RobotControlResponse;
struct RobotControlResponseDefaultTypeInternal;
extern RobotControlResponseDefaultTypeInternal _RobotControlResponse_default_instance_;
class RobotFeedback;
struct RobotFeedbackDefaultTypeInternal;
extern RobotFeedbackDefaultTypeInternal _RobotFeedback_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RobotControlResponse* Arena::CreateMaybeMessage<::RobotControlResponse>(Arena*);
template<> ::RobotFeedback* Arena::CreateMaybeMessage<::RobotFeedback>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RobotFeedback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RobotFeedback) */ {
 public:
  inline RobotFeedback() : RobotFeedback(nullptr) {}
  ~RobotFeedback() override;
  explicit constexpr RobotFeedback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotFeedback(const RobotFeedback& from);
  RobotFeedback(RobotFeedback&& from) noexcept
    : RobotFeedback() {
    *this = ::std::move(from);
  }

  inline RobotFeedback& operator=(const RobotFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotFeedback& operator=(RobotFeedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotFeedback& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotFeedback* internal_default_instance() {
    return reinterpret_cast<const RobotFeedback*>(
               &_RobotFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RobotFeedback& a, RobotFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotFeedback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotFeedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotFeedback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotFeedback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotFeedback& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotFeedback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RobotFeedback";
  }
  protected:
  explicit RobotFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFieldNumber = 3,
    kIdFieldNumber = 1,
    kDribblerBallContactFieldNumber = 2,
  };
  // optional .google.protobuf.Any custom = 3;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::PROTOBUF_NAMESPACE_ID::Any& custom() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_custom();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_custom();
  void set_allocated_custom(::PROTOBUF_NAMESPACE_ID::Any* custom);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_custom() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::PROTOBUF_NAMESPACE_ID::Any* custom);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_custom();

  // required uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional bool dribbler_ball_contact = 2;
  bool has_dribbler_ball_contact() const;
  private:
  bool _internal_has_dribbler_ball_contact() const;
  public:
  void clear_dribbler_ball_contact();
  bool dribbler_ball_contact() const;
  void set_dribbler_ball_contact(bool value);
  private:
  bool _internal_dribbler_ball_contact() const;
  void _internal_set_dribbler_ball_contact(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RobotFeedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::Any* custom_;
  uint32_t id_;
  bool dribbler_ball_contact_;
  friend struct ::TableStruct_ssl_5fsimulation_5frobot_5ffeedback_2eproto;
};
// -------------------------------------------------------------------

class RobotControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RobotControlResponse) */ {
 public:
  inline RobotControlResponse() : RobotControlResponse(nullptr) {}
  ~RobotControlResponse() override;
  explicit constexpr RobotControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotControlResponse(const RobotControlResponse& from);
  RobotControlResponse(RobotControlResponse&& from) noexcept
    : RobotControlResponse() {
    *this = ::std::move(from);
  }

  inline RobotControlResponse& operator=(const RobotControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotControlResponse& operator=(RobotControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotControlResponse* internal_default_instance() {
    return reinterpret_cast<const RobotControlResponse*>(
               &_RobotControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotControlResponse& a, RobotControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RobotControlResponse";
  }
  protected:
  explicit RobotControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 1,
    kFeedbackFieldNumber = 2,
  };
  // repeated .SimulatorError errors = 1;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::SimulatorError* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimulatorError >*
      mutable_errors();
  private:
  const ::SimulatorError& _internal_errors(int index) const;
  ::SimulatorError* _internal_add_errors();
  public:
  const ::SimulatorError& errors(int index) const;
  ::SimulatorError* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimulatorError >&
      errors() const;

  // repeated .RobotFeedback feedback = 2;
  int feedback_size() const;
  private:
  int _internal_feedback_size() const;
  public:
  void clear_feedback();
  ::RobotFeedback* mutable_feedback(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotFeedback >*
      mutable_feedback();
  private:
  const ::RobotFeedback& _internal_feedback(int index) const;
  ::RobotFeedback* _internal_add_feedback();
  public:
  const ::RobotFeedback& feedback(int index) const;
  ::RobotFeedback* add_feedback();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotFeedback >&
      feedback() const;

  // @@protoc_insertion_point(class_scope:RobotControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimulatorError > errors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotFeedback > feedback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssl_5fsimulation_5frobot_5ffeedback_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotFeedback

// required uint32 id = 1;
inline bool RobotFeedback::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RobotFeedback::has_id() const {
  return _internal_has_id();
}
inline void RobotFeedback::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RobotFeedback::_internal_id() const {
  return id_;
}
inline uint32_t RobotFeedback::id() const {
  // @@protoc_insertion_point(field_get:RobotFeedback.id)
  return _internal_id();
}
inline void RobotFeedback::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void RobotFeedback::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RobotFeedback.id)
}

// optional bool dribbler_ball_contact = 2;
inline bool RobotFeedback::_internal_has_dribbler_ball_contact() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RobotFeedback::has_dribbler_ball_contact() const {
  return _internal_has_dribbler_ball_contact();
}
inline void RobotFeedback::clear_dribbler_ball_contact() {
  dribbler_ball_contact_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RobotFeedback::_internal_dribbler_ball_contact() const {
  return dribbler_ball_contact_;
}
inline bool RobotFeedback::dribbler_ball_contact() const {
  // @@protoc_insertion_point(field_get:RobotFeedback.dribbler_ball_contact)
  return _internal_dribbler_ball_contact();
}
inline void RobotFeedback::_internal_set_dribbler_ball_contact(bool value) {
  _has_bits_[0] |= 0x00000004u;
  dribbler_ball_contact_ = value;
}
inline void RobotFeedback::set_dribbler_ball_contact(bool value) {
  _internal_set_dribbler_ball_contact(value);
  // @@protoc_insertion_point(field_set:RobotFeedback.dribbler_ball_contact)
}

// optional .google.protobuf.Any custom = 3;
inline bool RobotFeedback::_internal_has_custom() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || custom_ != nullptr);
  return value;
}
inline bool RobotFeedback::has_custom() const {
  return _internal_has_custom();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RobotFeedback::_internal_custom() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = custom_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RobotFeedback::custom() const {
  // @@protoc_insertion_point(field_get:RobotFeedback.custom)
  return _internal_custom();
}
inline void RobotFeedback::unsafe_arena_set_allocated_custom(
    ::PROTOBUF_NAMESPACE_ID::Any* custom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_);
  }
  custom_ = custom;
  if (custom) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RobotFeedback.custom)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RobotFeedback::release_custom() {
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = custom_;
  custom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RobotFeedback::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_release:RobotFeedback.custom)
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = custom_;
  custom_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RobotFeedback::_internal_mutable_custom() {
  _has_bits_[0] |= 0x00000001u;
  if (custom_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    custom_ = p;
  }
  return custom_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RobotFeedback::mutable_custom() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:RobotFeedback.custom)
  return _msg;
}
inline void RobotFeedback::set_allocated_custom(::PROTOBUF_NAMESPACE_ID::Any* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_);
  }
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom));
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  custom_ = custom;
  // @@protoc_insertion_point(field_set_allocated:RobotFeedback.custom)
}

// -------------------------------------------------------------------

// RobotControlResponse

// repeated .SimulatorError errors = 1;
inline int RobotControlResponse::_internal_errors_size() const {
  return errors_.size();
}
inline int RobotControlResponse::errors_size() const {
  return _internal_errors_size();
}
inline ::SimulatorError* RobotControlResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:RobotControlResponse.errors)
  return errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimulatorError >*
RobotControlResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:RobotControlResponse.errors)
  return &errors_;
}
inline const ::SimulatorError& RobotControlResponse::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const ::SimulatorError& RobotControlResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:RobotControlResponse.errors)
  return _internal_errors(index);
}
inline ::SimulatorError* RobotControlResponse::_internal_add_errors() {
  return errors_.Add();
}
inline ::SimulatorError* RobotControlResponse::add_errors() {
  ::SimulatorError* _add = _internal_add_errors();
  // @@protoc_insertion_point(field_add:RobotControlResponse.errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SimulatorError >&
RobotControlResponse::errors() const {
  // @@protoc_insertion_point(field_list:RobotControlResponse.errors)
  return errors_;
}

// repeated .RobotFeedback feedback = 2;
inline int RobotControlResponse::_internal_feedback_size() const {
  return feedback_.size();
}
inline int RobotControlResponse::feedback_size() const {
  return _internal_feedback_size();
}
inline void RobotControlResponse::clear_feedback() {
  feedback_.Clear();
}
inline ::RobotFeedback* RobotControlResponse::mutable_feedback(int index) {
  // @@protoc_insertion_point(field_mutable:RobotControlResponse.feedback)
  return feedback_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotFeedback >*
RobotControlResponse::mutable_feedback() {
  // @@protoc_insertion_point(field_mutable_list:RobotControlResponse.feedback)
  return &feedback_;
}
inline const ::RobotFeedback& RobotControlResponse::_internal_feedback(int index) const {
  return feedback_.Get(index);
}
inline const ::RobotFeedback& RobotControlResponse::feedback(int index) const {
  // @@protoc_insertion_point(field_get:RobotControlResponse.feedback)
  return _internal_feedback(index);
}
inline ::RobotFeedback* RobotControlResponse::_internal_add_feedback() {
  return feedback_.Add();
}
inline ::RobotFeedback* RobotControlResponse::add_feedback() {
  ::RobotFeedback* _add = _internal_add_feedback();
  // @@protoc_insertion_point(field_add:RobotControlResponse.feedback)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotFeedback >&
RobotControlResponse::feedback() const {
  // @@protoc_insertion_point(field_list:RobotControlResponse.feedback)
  return feedback_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5frobot_5ffeedback_2eproto
